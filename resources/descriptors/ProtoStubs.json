{
  "default": {
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "google.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IdpProxyProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of IdpProxyProtoStub",
    "objectName": "IdpProxyProtoStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "orange.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "RethinkOidcProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of RethinkOidcProtoStub",
    "objectName": "RethinkOidcProtoStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "mtproxy.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MtproxyProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of MtproxyProtoStub",
    "objectName": "MtproxyProtoStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}
