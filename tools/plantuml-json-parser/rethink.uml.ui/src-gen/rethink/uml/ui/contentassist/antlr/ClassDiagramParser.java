/*
 * generated by Xtext
 */
package rethink.uml.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import rethink.uml.services.ClassDiagramGrammarAccess;

public class ClassDiagramParser extends AbstractContentAssistParser {
	
	@Inject
	private ClassDiagramGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected rethink.uml.ui.contentassist.antlr.internal.InternalClassDiagramParser createParser() {
		rethink.uml.ui.contentassist.antlr.internal.InternalClassDiagramParser result = new rethink.uml.ui.contentassist.antlr.internal.InternalClassDiagramParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getEntityAndNoteAccess().getAlternatives(), "rule__EntityAndNote__Alternatives");
					put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
					put(grammarAccess.getRelationParseAccess().getAlternatives(), "rule__RelationParse__Alternatives");
					put(grammarAccess.getRelationParseAccess().getAlternatives_1_1(), "rule__RelationParse__Alternatives_1_1");
					put(grammarAccess.getRelationTypeAccess().getAlternatives(), "rule__RelationType__Alternatives");
					put(grammarAccess.getStrongRelAccess().getAlternatives_1(), "rule__StrongRel__Alternatives_1");
					put(grammarAccess.getWeakRelAccess().getAlternatives_1(), "rule__WeakRel__Alternatives_1");
					put(grammarAccess.getPropertyAccess().getAlternatives_1(), "rule__Property__Alternatives_1");
					put(grammarAccess.getPropertyAccess().getAlternatives_1_0_1_1(), "rule__Property__Alternatives_1_0_1_1");
					put(grammarAccess.getNoteAccess().getAlternatives_1(), "rule__Note__Alternatives_1");
					put(grammarAccess.getNoteAccess().getAlternatives_1_0(), "rule__Note__Alternatives_1_0");
					put(grammarAccess.getTextAccess().getAlternatives(), "rule__Text__Alternatives");
					put(grammarAccess.getPackageStyleAccess().getAlternatives(), "rule__PackageStyle__Alternatives");
					put(grammarAccess.getCompTypeAccess().getAlternatives(), "rule__CompType__Alternatives");
					put(grammarAccess.getNotePositionAccess().getAlternatives(), "rule__NotePosition__Alternatives");
					put(grammarAccess.getNativeTypeAccess().getAlternatives(), "rule__NativeType__Alternatives");
					put(grammarAccess.getDomainModelAccess().getGroup(), "rule__DomainModel__Group__0");
					put(grammarAccess.getCPackageAccess().getGroup(), "rule__CPackage__Group__0");
					put(grammarAccess.getCPackageAccess().getGroup_2(), "rule__CPackage__Group_2__0");
					put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
					put(grammarAccess.getRelationAccess().getGroup_3(), "rule__Relation__Group_3__0");
					put(grammarAccess.getRelationParseAccess().getGroup_0(), "rule__RelationParse__Group_0__0");
					put(grammarAccess.getRelationParseAccess().getGroup_1(), "rule__RelationParse__Group_1__0");
					put(grammarAccess.getStrongRelAccess().getGroup(), "rule__StrongRel__Group__0");
					put(grammarAccess.getWeakRelAccess().getGroup(), "rule__WeakRel__Group__0");
					put(grammarAccess.getEnumerAccess().getGroup(), "rule__Enumer__Group__0");
					put(grammarAccess.getEnumerAccess().getGroup_4(), "rule__Enumer__Group_4__0");
					put(grammarAccess.getClazzAccess().getGroup(), "rule__Clazz__Group__0");
					put(grammarAccess.getClazzAccess().getGroup_2(), "rule__Clazz__Group_2__0");
					put(grammarAccess.getClazzAccess().getGroup_3(), "rule__Clazz__Group_3__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_1_0(), "rule__Property__Group_1_0__0");
					put(grammarAccess.getPropertyAccess().getGroup_1_0_1(), "rule__Property__Group_1_0_1__0");
					put(grammarAccess.getPropertyAccess().getGroup_1_1(), "rule__Property__Group_1_1__0");
					put(grammarAccess.getEntityListAccess().getGroup(), "rule__EntityList__Group__0");
					put(grammarAccess.getEntityListAccess().getGroup_2(), "rule__EntityList__Group_2__0");
					put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
					put(grammarAccess.getNoteAccess().getGroup_1_0_0(), "rule__Note__Group_1_0_0__0");
					put(grammarAccess.getNoteAccess().getGroup_1_0_0_1(), "rule__Note__Group_1_0_0_1__0");
					put(grammarAccess.getNoteAccess().getGroup_1_0_1(), "rule__Note__Group_1_0_1__0");
					put(grammarAccess.getNoteAccess().getGroup_1_1(), "rule__Note__Group_1_1__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getDomainModelAccess().getFileAssignment_2(), "rule__DomainModel__FileAssignment_2");
					put(grammarAccess.getDomainModelAccess().getPackagesAssignment_4(), "rule__DomainModel__PackagesAssignment_4");
					put(grammarAccess.getCPackageAccess().getNameAssignment_1(), "rule__CPackage__NameAssignment_1");
					put(grammarAccess.getCPackageAccess().getStyleAssignment_2_1(), "rule__CPackage__StyleAssignment_2_1");
					put(grammarAccess.getCPackageAccess().getElementsAssignment_5(), "rule__CPackage__ElementsAssignment_5");
					put(grammarAccess.getRelationAccess().getLeftRefAssignment_0(), "rule__Relation__LeftRefAssignment_0");
					put(grammarAccess.getRelationAccess().getRelTypeAssignment_1(), "rule__Relation__RelTypeAssignment_1");
					put(grammarAccess.getRelationAccess().getRightRefAssignment_2(), "rule__Relation__RightRefAssignment_2");
					put(grammarAccess.getRelationAccess().getNameAssignment_3_1(), "rule__Relation__NameAssignment_3_1");
					put(grammarAccess.getRelationParseAccess().getCompAssignment_0_0(), "rule__RelationParse__CompAssignment_0_0");
					put(grammarAccess.getRelationParseAccess().getTypeAssignment_0_1(), "rule__RelationParse__TypeAssignment_0_1");
					put(grammarAccess.getRelationParseAccess().getDirectAssignment_0_2(), "rule__RelationParse__DirectAssignment_0_2");
					put(grammarAccess.getRelationParseAccess().getMultiAssignment_0_4(), "rule__RelationParse__MultiAssignment_0_4");
					put(grammarAccess.getRelationParseAccess().getTypeAssignment_1_0(), "rule__RelationParse__TypeAssignment_1_0");
					put(grammarAccess.getRelationParseAccess().getDirectAssignment_1_1_0(), "rule__RelationParse__DirectAssignment_1_1_0");
					put(grammarAccess.getRelationParseAccess().getExtAssignment_1_1_1(), "rule__RelationParse__ExtAssignment_1_1_1");
					put(grammarAccess.getRelationParseAccess().getMultiAssignment_1_3(), "rule__RelationParse__MultiAssignment_1_3");
					put(grammarAccess.getRelationTypeAccess().getStrongAssignment_0(), "rule__RelationType__StrongAssignment_0");
					put(grammarAccess.getRelationTypeAccess().getWeakAssignment_1(), "rule__RelationType__WeakAssignment_1");
					put(grammarAccess.getEnumerAccess().getNameAssignment_1(), "rule__Enumer__NameAssignment_1");
					put(grammarAccess.getEnumerAccess().getTypesAssignment_4_0(), "rule__Enumer__TypesAssignment_4_0");
					put(grammarAccess.getClazzAccess().getNameAssignment_1(), "rule__Clazz__NameAssignment_1");
					put(grammarAccess.getClazzAccess().getStereotypeAssignment_2_1(), "rule__Clazz__StereotypeAssignment_2_1");
					put(grammarAccess.getClazzAccess().getPropertiesAssignment_3_2(), "rule__Clazz__PropertiesAssignment_3_2");
					put(grammarAccess.getPropertyAccess().getNameAssignment_0(), "rule__Property__NameAssignment_0");
					put(grammarAccess.getPropertyAccess().getOptionalAssignment_1_0_0(), "rule__Property__OptionalAssignment_1_0_0");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_1_0_1_1_0(), "rule__Property__TypeAssignment_1_0_1_1_0");
					put(grammarAccess.getPropertyAccess().getEntityAssignment_1_0_1_1_1(), "rule__Property__EntityAssignment_1_0_1_1_1");
					put(grammarAccess.getPropertyAccess().getEntityListAssignment_1_0_1_1_2(), "rule__Property__EntityListAssignment_1_0_1_1_2");
					put(grammarAccess.getPropertyAccess().getConstantAssignment_1_1_0(), "rule__Property__ConstantAssignment_1_1_0");
					put(grammarAccess.getPropertyAccess().getValueAssignment_1_1_1(), "rule__Property__ValueAssignment_1_1_1");
					put(grammarAccess.getEntityListAccess().getRefsAssignment_1(), "rule__EntityList__RefsAssignment_1");
					put(grammarAccess.getEntityListAccess().getRefsAssignment_2_1(), "rule__EntityList__RefsAssignment_2_1");
					put(grammarAccess.getNoteAccess().getPositionAssignment_1_0_0_0(), "rule__Note__PositionAssignment_1_0_0_0");
					put(grammarAccess.getNoteAccess().getValueAssignment_1_0_0_1_1(), "rule__Note__ValueAssignment_1_0_0_1_1");
					put(grammarAccess.getNoteAccess().getOfAssignment_1_0_1_1(), "rule__Note__OfAssignment_1_0_1_1");
					put(grammarAccess.getNoteAccess().getValueAssignment_1_0_1_3(), "rule__Note__ValueAssignment_1_0_1_3");
					put(grammarAccess.getNoteAccess().getNameAssignment_1_1_1(), "rule__Note__NameAssignment_1_1_1");
					put(grammarAccess.getNoteAccess().getValueAssignment_1_1_3(), "rule__Note__ValueAssignment_1_1_3");
					put(grammarAccess.getDataTypeAccess().getNativeAssignment_0(), "rule__DataType__NativeAssignment_0");
					put(grammarAccess.getDataTypeAccess().getIsArrayAssignment_1(), "rule__DataType__IsArrayAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			rethink.uml.ui.contentassist.antlr.internal.InternalClassDiagramParser typedParser = (rethink.uml.ui.contentassist.antlr.internal.InternalClassDiagramParser) parser;
			typedParser.entryRuleDomainModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ClassDiagramGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ClassDiagramGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
