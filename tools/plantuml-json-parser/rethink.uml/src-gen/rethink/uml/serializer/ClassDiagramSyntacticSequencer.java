/*
 * generated by Xtext
 */
package rethink.uml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import rethink.uml.services.ClassDiagramGrammarAccess;

@SuppressWarnings("all")
public class ClassDiagramSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ClassDiagramGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Clazz_END_LINETerminalRuleCall_3_1_q;
	protected AbstractElementAlias match_Clazz___LeftCurlyBracketKeyword_3_0_END_LINETerminalRuleCall_3_1_q_RightCurlyBracketKeyword_3_3__q;
	protected AbstractElementAlias match_Enumer_END_LINETerminalRuleCall_3_q;
	protected AbstractElementAlias match_Enumer_END_LINETerminalRuleCall_4_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ClassDiagramGrammarAccess) access;
		match_Clazz_END_LINETerminalRuleCall_3_1_q = new TokenAlias(false, true, grammarAccess.getClazzAccess().getEND_LINETerminalRuleCall_3_1());
		match_Clazz___LeftCurlyBracketKeyword_3_0_END_LINETerminalRuleCall_3_1_q_RightCurlyBracketKeyword_3_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getClazzAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, true, grammarAccess.getClazzAccess().getEND_LINETerminalRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getClazzAccess().getRightCurlyBracketKeyword_3_3()));
		match_Enumer_END_LINETerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getEnumerAccess().getEND_LINETerminalRuleCall_3());
		match_Enumer_END_LINETerminalRuleCall_4_1_q = new TokenAlias(false, true, grammarAccess.getEnumerAccess().getEND_LINETerminalRuleCall_4_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getEND_LINERule())
			return getEND_LINEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getStrongRelRule())
			return getStrongRelToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getWeakRelRule())
			return getWeakRelToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal END_LINE: ('\t'|'\r'|'\n')+;
	 */
	protected String getEND_LINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\t";
	}
	
	/**
	 * StrongRel: '-' ("up" | "down" | "left" | "right")? '-'+;
	 */
	protected String getStrongRelToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "--";
	}
	
	/**
	 * terminal WS: (' '|'\t')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	/**
	 * WeakRel: '.' ("up" | "down" | "left" | "right")? '.'+;
	 */
	protected String getWeakRelToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "..";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Clazz_END_LINETerminalRuleCall_3_1_q.equals(syntax))
				emit_Clazz_END_LINETerminalRuleCall_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Clazz___LeftCurlyBracketKeyword_3_0_END_LINETerminalRuleCall_3_1_q_RightCurlyBracketKeyword_3_3__q.equals(syntax))
				emit_Clazz___LeftCurlyBracketKeyword_3_0_END_LINETerminalRuleCall_3_1_q_RightCurlyBracketKeyword_3_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Enumer_END_LINETerminalRuleCall_3_q.equals(syntax))
				emit_Enumer_END_LINETerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Enumer_END_LINETerminalRuleCall_4_1_q.equals(syntax))
				emit_Enumer_END_LINETerminalRuleCall_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     END_LINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) properties+=Property
	 *     stereotype=Text '>>' '{' (ambiguity) properties+=Property
	 */
	protected void emit_Clazz_END_LINETerminalRuleCall_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' END_LINE? '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) END_LINE (rule end)
	 *     stereotype=Text '>>' (ambiguity) END_LINE (rule end)
	 */
	protected void emit_Clazz___LeftCurlyBracketKeyword_3_0_END_LINETerminalRuleCall_3_1_q_RightCurlyBracketKeyword_3_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     END_LINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) '}' END_LINE (rule end)
	 *     name=ID '{' (ambiguity) types+=ID
	 */
	protected void emit_Enumer_END_LINETerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     END_LINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     types+=ID (ambiguity) '}' END_LINE (rule end)
	 *     types+=ID (ambiguity) types+=ID
	 */
	protected void emit_Enumer_END_LINETerminalRuleCall_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
