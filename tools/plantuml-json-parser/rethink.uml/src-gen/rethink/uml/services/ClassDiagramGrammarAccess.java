/*
 * generated by Xtext
 */
package rethink.uml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ClassDiagramGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartumlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDomainModelAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileSTRINGTerminalRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cPackagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPackagesCPackageParserRuleCall_4_0 = (RuleCall)cPackagesAssignment_4.eContents().get(0);
		private final Keyword cEndumlKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DomainModel:
		//	"@startuml" {DomainModel} file=STRING? END_LINE packages+=CPackage+ "@enduml";
		@Override public ParserRule getRule() { return rule; }

		//"@startuml" {DomainModel} file=STRING? END_LINE packages+=CPackage+ "@enduml"
		public Group getGroup() { return cGroup; }

		//"@startuml"
		public Keyword getStartumlKeyword_0() { return cStartumlKeyword_0; }

		//{DomainModel}
		public Action getDomainModelAction_1() { return cDomainModelAction_1; }

		//file=STRING?
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }

		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_2_0() { return cFileSTRINGTerminalRuleCall_2_0; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_3() { return cEND_LINETerminalRuleCall_3; }

		//packages+=CPackage+
		public Assignment getPackagesAssignment_4() { return cPackagesAssignment_4; }

		//CPackage
		public RuleCall getPackagesCPackageParserRuleCall_4_0() { return cPackagesCPackageParserRuleCall_4_0; }

		//"@enduml"
		public Keyword getEndumlKeyword_5() { return cEndumlKeyword_5; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Relation | Node;
		@Override public ParserRule getRule() { return rule; }

		//Relation | Node
		public Alternatives getAlternatives() { return cAlternatives; }

		//Relation
		public RuleCall getRelationParserRuleCall_0() { return cRelationParserRuleCall_0; }

		//Node
		public RuleCall getNodeParserRuleCall_1() { return cNodeParserRuleCall_1; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNoteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Node:
		//	CPackage | Entity | Note;
		@Override public ParserRule getRule() { return rule; }

		//CPackage | Entity | Note
		public Alternatives getAlternatives() { return cAlternatives; }

		//CPackage
		public RuleCall getCPackageParserRuleCall_0() { return cCPackageParserRuleCall_0; }

		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }

		//Note
		public RuleCall getNoteParserRuleCall_2() { return cNoteParserRuleCall_2; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClazzParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	Enumer | Clazz;
		@Override public ParserRule getRule() { return rule; }

		//Enumer | Clazz
		public Alternatives getAlternatives() { return cAlternatives; }

		//Enumer
		public RuleCall getEnumerParserRuleCall_0() { return cEnumerParserRuleCall_0; }

		//Clazz
		public RuleCall getClazzParserRuleCall_1() { return cClazzParserRuleCall_1; }
	}

	public class CPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStylePackageStyleEnumRuleCall_2_1_0 = (RuleCall)cStyleAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEND_LINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsElementParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cEND_LINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//CPackage:
		//	"package" name=QualifiedName ("<<" style=PackageStyle ">>")? "{" END_LINE elements+=Element* "}" END_LINE;
		@Override public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName ("<<" style=PackageStyle ">>")? "{" END_LINE elements+=Element* "}" END_LINE
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("<<" style=PackageStyle ">>")?
		public Group getGroup_2() { return cGroup_2; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_2_0() { return cLessThanSignLessThanSignKeyword_2_0; }

		//style=PackageStyle
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }

		//PackageStyle
		public RuleCall getStylePackageStyleEnumRuleCall_2_1_0() { return cStylePackageStyleEnumRuleCall_2_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2_2() { return cGreaterThanSignGreaterThanSignKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_4() { return cEND_LINETerminalRuleCall_4; }

		//elements+=Element*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }

		//Element
		public RuleCall getElementsElementParserRuleCall_5_0() { return cElementsElementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_7() { return cEND_LINETerminalRuleCall_7; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftRefNodeCrossReference_0_0 = (CrossReference)cLeftRefAssignment_0.eContents().get(0);
		private final RuleCall cLeftRefNodeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cLeftRefNodeCrossReference_0_0.eContents().get(1);
		private final Assignment cRelTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelTypeRelationParseParserRuleCall_1_0 = (RuleCall)cRelTypeAssignment_1.eContents().get(0);
		private final Assignment cRightRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRightRefNodeCrossReference_2_0 = (CrossReference)cRightRefAssignment_2.eContents().get(0);
		private final RuleCall cRightRefNodeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRightRefNodeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameTextParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////BEGIN: relation rules
		//Relation:
		//	leftRef=[Node|QualifiedName] relType=RelationParse rightRef=[Node|QualifiedName] (":" name=Text)? END_LINE;
		@Override public ParserRule getRule() { return rule; }

		//leftRef=[Node|QualifiedName] relType=RelationParse rightRef=[Node|QualifiedName] (":" name=Text)? END_LINE
		public Group getGroup() { return cGroup; }

		//leftRef=[Node|QualifiedName]
		public Assignment getLeftRefAssignment_0() { return cLeftRefAssignment_0; }

		//[Node|QualifiedName]
		public CrossReference getLeftRefNodeCrossReference_0_0() { return cLeftRefNodeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getLeftRefNodeQualifiedNameParserRuleCall_0_0_1() { return cLeftRefNodeQualifiedNameParserRuleCall_0_0_1; }

		//relType=RelationParse
		public Assignment getRelTypeAssignment_1() { return cRelTypeAssignment_1; }

		//RelationParse
		public RuleCall getRelTypeRelationParseParserRuleCall_1_0() { return cRelTypeRelationParseParserRuleCall_1_0; }

		//rightRef=[Node|QualifiedName]
		public Assignment getRightRefAssignment_2() { return cRightRefAssignment_2; }

		//[Node|QualifiedName]
		public CrossReference getRightRefNodeCrossReference_2_0() { return cRightRefNodeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getRightRefNodeQualifiedNameParserRuleCall_2_0_1() { return cRightRefNodeQualifiedNameParserRuleCall_2_0_1; }

		//(":" name=Text)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//name=Text
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//Text
		public RuleCall getNameTextParserRuleCall_3_1_0() { return cNameTextParserRuleCall_3_1_0; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_4() { return cEND_LINETerminalRuleCall_4; }
	}

	public class RelationParseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationParse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCompAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCompCompTypeEnumRuleCall_0_0_0 = (RuleCall)cCompAssignment_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeRelationTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cDirectAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cDirectGreaterThanSignKeyword_0_2_0 = (Keyword)cDirectAssignment_0_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cMultiAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cMultiMULTITerminalRuleCall_0_4_0 = (RuleCall)cMultiAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeRelationTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDirectAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cDirectGreaterThanSignKeyword_1_1_0_0 = (Keyword)cDirectAssignment_1_1_0.eContents().get(0);
		private final Assignment cExtAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cExtVerticalLineGreaterThanSignKeyword_1_1_1_0 = (Keyword)cExtAssignment_1_1_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cMultiAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cMultiMULTITerminalRuleCall_1_3_0 = (RuleCall)cMultiAssignment_1_3.eContents().get(0);
		
		//RelationParse hidden():
		//	comp=CompType type=RelationType direct?=">"? WS multi=MULTI? | type=RelationType (direct?=">" | ext?="|>")? WS
		//	multi=MULTI?;
		@Override public ParserRule getRule() { return rule; }

		//comp=CompType type=RelationType direct?=">"? WS multi=MULTI? | type=RelationType (direct?=">" | ext?="|>")? WS
		//multi=MULTI?
		public Alternatives getAlternatives() { return cAlternatives; }

		//comp=CompType type=RelationType direct?=">"? WS multi=MULTI?
		public Group getGroup_0() { return cGroup_0; }

		//comp=CompType
		public Assignment getCompAssignment_0_0() { return cCompAssignment_0_0; }

		//CompType
		public RuleCall getCompCompTypeEnumRuleCall_0_0_0() { return cCompCompTypeEnumRuleCall_0_0_0; }

		//type=RelationType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//RelationType
		public RuleCall getTypeRelationTypeParserRuleCall_0_1_0() { return cTypeRelationTypeParserRuleCall_0_1_0; }

		//direct?=">"?
		public Assignment getDirectAssignment_0_2() { return cDirectAssignment_0_2; }

		//">"
		public Keyword getDirectGreaterThanSignKeyword_0_2_0() { return cDirectGreaterThanSignKeyword_0_2_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_0_3() { return cWSTerminalRuleCall_0_3; }

		//multi=MULTI?
		public Assignment getMultiAssignment_0_4() { return cMultiAssignment_0_4; }

		//MULTI
		public RuleCall getMultiMULTITerminalRuleCall_0_4_0() { return cMultiMULTITerminalRuleCall_0_4_0; }

		//type=RelationType (direct?=">" | ext?="|>")? WS multi=MULTI?
		public Group getGroup_1() { return cGroup_1; }

		//type=RelationType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//RelationType
		public RuleCall getTypeRelationTypeParserRuleCall_1_0_0() { return cTypeRelationTypeParserRuleCall_1_0_0; }

		//(direct?=">" | ext?="|>")?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//direct?=">"
		public Assignment getDirectAssignment_1_1_0() { return cDirectAssignment_1_1_0; }

		//">"
		public Keyword getDirectGreaterThanSignKeyword_1_1_0_0() { return cDirectGreaterThanSignKeyword_1_1_0_0; }

		//ext?="|>"
		public Assignment getExtAssignment_1_1_1() { return cExtAssignment_1_1_1; }

		//"|>"
		public Keyword getExtVerticalLineGreaterThanSignKeyword_1_1_1_0() { return cExtVerticalLineGreaterThanSignKeyword_1_1_1_0; }

		//WS
		public RuleCall getWSTerminalRuleCall_1_2() { return cWSTerminalRuleCall_1_2; }

		//multi=MULTI?
		public Assignment getMultiAssignment_1_3() { return cMultiAssignment_1_3; }

		//MULTI
		public RuleCall getMultiMULTITerminalRuleCall_1_3_0() { return cMultiMULTITerminalRuleCall_1_3_0; }
	}

	public class RelationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrongAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStrongStrongRelParserRuleCall_0_0 = (RuleCall)cStrongAssignment_0.eContents().get(0);
		private final Assignment cWeakAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cWeakWeakRelParserRuleCall_1_0 = (RuleCall)cWeakAssignment_1.eContents().get(0);
		
		//RelationType hidden():
		//	strong?=StrongRel | weak?=WeakRel;
		@Override public ParserRule getRule() { return rule; }

		//strong?=StrongRel | weak?=WeakRel
		public Alternatives getAlternatives() { return cAlternatives; }

		//strong?=StrongRel
		public Assignment getStrongAssignment_0() { return cStrongAssignment_0; }

		//StrongRel
		public RuleCall getStrongStrongRelParserRuleCall_0_0() { return cStrongStrongRelParserRuleCall_0_0; }

		//weak?=WeakRel
		public Assignment getWeakAssignment_1() { return cWeakAssignment_1; }

		//WeakRel
		public RuleCall getWeakWeakRelParserRuleCall_1_0() { return cWeakWeakRelParserRuleCall_1_0; }
	}

	public class StrongRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrongRel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUpKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDownKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cRightKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StrongRel:
		//	"-" ("up" | "down" | "left" | "right")? "-"+;
		@Override public ParserRule getRule() { return rule; }

		//"-" ("up" | "down" | "left" | "right")? "-"+
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//("up" | "down" | "left" | "right")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"up"
		public Keyword getUpKeyword_1_0() { return cUpKeyword_1_0; }

		//"down"
		public Keyword getDownKeyword_1_1() { return cDownKeyword_1_1; }

		//"left"
		public Keyword getLeftKeyword_1_2() { return cLeftKeyword_1_2; }

		//"right"
		public Keyword getRightKeyword_1_3() { return cRightKeyword_1_3; }

		//"-"+
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
	}

	public class WeakRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeakRel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUpKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cDownKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cRightKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WeakRel:
		//	"." ("up" | "down" | "left" | "right")? "."+;
		@Override public ParserRule getRule() { return rule; }

		//"." ("up" | "down" | "left" | "right")? "."+
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//("up" | "down" | "left" | "right")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"up"
		public Keyword getUpKeyword_1_0() { return cUpKeyword_1_0; }

		//"down"
		public Keyword getDownKeyword_1_1() { return cDownKeyword_1_1; }

		//"left"
		public Keyword getLeftKeyword_1_2() { return cLeftKeyword_1_2; }

		//"right"
		public Keyword getRightKeyword_1_3() { return cRightKeyword_1_3; }

		//"."+
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class EnumerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEND_LINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTypesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTypesIDTerminalRuleCall_4_0_0 = (RuleCall)cTypesAssignment_4_0.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cEND_LINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////END: relation rules
		////BEGIN: entity rules
		//Enumer:
		//	"enum" name=ID "{" END_LINE? (types+=ID END_LINE?)* "}" END_LINE;
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" END_LINE? (types+=ID END_LINE?)* "}" END_LINE
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//END_LINE?
		public RuleCall getEND_LINETerminalRuleCall_3() { return cEND_LINETerminalRuleCall_3; }

		//(types+=ID END_LINE?)*
		public Group getGroup_4() { return cGroup_4; }

		//types+=ID
		public Assignment getTypesAssignment_4_0() { return cTypesAssignment_4_0; }

		//ID
		public RuleCall getTypesIDTerminalRuleCall_4_0_0() { return cTypesIDTerminalRuleCall_4_0_0; }

		//END_LINE?
		public RuleCall getEND_LINETerminalRuleCall_4_1() { return cEND_LINETerminalRuleCall_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_6() { return cEND_LINETerminalRuleCall_6; }
	}

	public class ClazzElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clazz");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStereotypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStereotypeTextParserRuleCall_2_1_0 = (RuleCall)cStereotypeAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cPropertiesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_2_0 = (RuleCall)cPropertiesAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final RuleCall cEND_LINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Clazz:
		//	"class" name=ID ("<<" stereotype=Text ">>")? ("{" END_LINE? properties+=Property* "}")? END_LINE;
		@Override public ParserRule getRule() { return rule; }

		//"class" name=ID ("<<" stereotype=Text ">>")? ("{" END_LINE? properties+=Property* "}")? END_LINE
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<<" stereotype=Text ">>")?
		public Group getGroup_2() { return cGroup_2; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_2_0() { return cLessThanSignLessThanSignKeyword_2_0; }

		//stereotype=Text
		public Assignment getStereotypeAssignment_2_1() { return cStereotypeAssignment_2_1; }

		//Text
		public RuleCall getStereotypeTextParserRuleCall_2_1_0() { return cStereotypeTextParserRuleCall_2_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2_2() { return cGreaterThanSignGreaterThanSignKeyword_2_2; }

		//("{" END_LINE? properties+=Property* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//END_LINE?
		public RuleCall getEND_LINETerminalRuleCall_3_1() { return cEND_LINETerminalRuleCall_3_1; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_3_2() { return cPropertiesAssignment_3_2; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_2_0() { return cPropertiesPropertyParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_4() { return cEND_LINETerminalRuleCall_4; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOptionalAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cOptionalQuestionMarkKeyword_1_0_0_0 = (Keyword)cOptionalAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1_1 = (Alternatives)cGroup_1_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1_1_0 = (Assignment)cAlternatives_1_0_1_1.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0_1_1_0_0 = (RuleCall)cTypeAssignment_1_0_1_1_0.eContents().get(0);
		private final Assignment cEntityListAssignment_1_0_1_1_1 = (Assignment)cAlternatives_1_0_1_1.eContents().get(1);
		private final RuleCall cEntityListEntityListParserRuleCall_1_0_1_1_1_0 = (RuleCall)cEntityListAssignment_1_0_1_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cConstantAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cConstantEqualsSignKeyword_1_1_0_0 = (Keyword)cConstantAssignment_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueTextParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Property:
		//	name=ID (optional?="?"? (":" (type=DataType | entityList=EntityList))? | constant?="=" value=Text) END_LINE;
		@Override public ParserRule getRule() { return rule; }

		//name=ID (optional?="?"? (":" (type=DataType | entityList=EntityList))? | constant?="=" value=Text) END_LINE
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//optional?="?"? (":" (type=DataType | entityList=EntityList))? | constant?="=" value=Text
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//optional?="?"? (":" (type=DataType | entityList=EntityList))?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//optional?="?"?
		public Assignment getOptionalAssignment_1_0_0() { return cOptionalAssignment_1_0_0; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_1_0_0_0() { return cOptionalQuestionMarkKeyword_1_0_0_0; }

		//(":" (type=DataType | entityList=EntityList))?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//":"
		public Keyword getColonKeyword_1_0_1_0() { return cColonKeyword_1_0_1_0; }

		//type=DataType | entityList=EntityList
		public Alternatives getAlternatives_1_0_1_1() { return cAlternatives_1_0_1_1; }

		//type=DataType
		public Assignment getTypeAssignment_1_0_1_1_0() { return cTypeAssignment_1_0_1_1_0; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0_1_1_0_0() { return cTypeDataTypeParserRuleCall_1_0_1_1_0_0; }

		//entityList=EntityList
		public Assignment getEntityListAssignment_1_0_1_1_1() { return cEntityListAssignment_1_0_1_1_1; }

		//EntityList
		public RuleCall getEntityListEntityListParserRuleCall_1_0_1_1_1_0() { return cEntityListEntityListParserRuleCall_1_0_1_1_1_0; }

		//constant?="=" value=Text
		public Group getGroup_1_1() { return cGroup_1_1; }

		//constant?="="
		public Assignment getConstantAssignment_1_1_0() { return cConstantAssignment_1_1_0; }

		//"="
		public Keyword getConstantEqualsSignKeyword_1_1_0_0() { return cConstantEqualsSignKeyword_1_1_0_0; }

		//value=Text
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//Text
		public RuleCall getValueTextParserRuleCall_1_1_1_0() { return cValueTextParserRuleCall_1_1_1_0; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_2() { return cEND_LINETerminalRuleCall_2; }
	}

	public class EntityListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefsEntityCrossReference_1_0 = (CrossReference)cRefsAssignment_1.eContents().get(0);
		private final RuleCall cRefsEntityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRefsEntityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefsEntityCrossReference_2_1_0 = (CrossReference)cRefsAssignment_2_1.eContents().get(0);
		private final RuleCall cRefsEntityQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRefsEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EntityList:
		//	"[" refs+=[Entity|QualifiedName] ("|" refs+=[Entity|QualifiedName])* "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" refs+=[Entity|QualifiedName] ("|" refs+=[Entity|QualifiedName])* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//refs+=[Entity|QualifiedName]
		public Assignment getRefsAssignment_1() { return cRefsAssignment_1; }

		//[Entity|QualifiedName]
		public CrossReference getRefsEntityCrossReference_1_0() { return cRefsEntityCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRefsEntityQualifiedNameParserRuleCall_1_0_1() { return cRefsEntityQualifiedNameParserRuleCall_1_0_1; }

		//("|" refs+=[Entity|QualifiedName])*
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//refs+=[Entity|QualifiedName]
		public Assignment getRefsAssignment_2_1() { return cRefsAssignment_2_1; }

		//[Entity|QualifiedName]
		public CrossReference getRefsEntityCrossReference_2_1_0() { return cRefsEntityCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getRefsEntityQualifiedNameParserRuleCall_2_1_0_1() { return cRefsEntityQualifiedNameParserRuleCall_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Assignment cPositionAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cPositionNotePositionEnumRuleCall_1_0_0_0_0 = (RuleCall)cPositionAssignment_1_0_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cValueTextParserRuleCall_1_0_0_1_1_0 = (RuleCall)cValueAssignment_1_0_0_1_1.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_1_0_0_1_2 = (RuleCall)cGroup_1_0_0_1.eContents().get(2);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOfKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOfAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final CrossReference cOfEntityCrossReference_1_0_1_1_0 = (CrossReference)cOfAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cOfEntityIDTerminalRuleCall_1_0_1_1_0_1 = (RuleCall)cOfEntityCrossReference_1_0_1_1_0.eContents().get(1);
		private final RuleCall cEND_LINETerminalRuleCall_1_0_1_2 = (RuleCall)cGroup_1_0_1.eContents().get(2);
		private final Assignment cValueAssignment_1_0_1_3 = (Assignment)cGroup_1_0_1.eContents().get(3);
		private final RuleCall cValueTextParserRuleCall_1_0_1_3_0 = (RuleCall)cValueAssignment_1_0_1_3.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_1_0_1_4 = (RuleCall)cGroup_1_0_1.eContents().get(4);
		private final Keyword cEndNoteKeyword_1_0_1_5 = (Keyword)cGroup_1_0_1.eContents().get(5);
		private final RuleCall cEND_LINETerminalRuleCall_1_0_1_6 = (RuleCall)cGroup_1_0_1.eContents().get(6);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAsKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cValueAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cValueTextParserRuleCall_1_1_3_0 = (RuleCall)cValueAssignment_1_1_3.eContents().get(0);
		private final RuleCall cEND_LINETerminalRuleCall_1_1_4 = (RuleCall)cGroup_1_1.eContents().get(4);
		private final Keyword cEndNoteKeyword_1_1_5 = (Keyword)cGroup_1_1.eContents().get(5);
		private final RuleCall cEND_LINETerminalRuleCall_1_1_6 = (RuleCall)cGroup_1_1.eContents().get(6);
		
		////END: entity rules
		////BEGIN: note rules
		//Note:
		//	"note" ((position=NotePosition (":" value=Text END_LINE) | "of" of=[Entity] END_LINE value=Text END_LINE "end note"
		//	END_LINE) | "as" name=ID END_LINE value=Text END_LINE "end note" END_LINE);
		@Override public ParserRule getRule() { return rule; }

		//"note" ((position=NotePosition (":" value=Text END_LINE) | "of" of=[Entity] END_LINE value=Text END_LINE "end note"
		//END_LINE) | "as" name=ID END_LINE value=Text END_LINE "end note" END_LINE)
		public Group getGroup() { return cGroup; }

		//"note"
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }

		//(position=NotePosition (":" value=Text END_LINE) | "of" of=[Entity] END_LINE value=Text END_LINE "end note" END_LINE) |
		//"as" name=ID END_LINE value=Text END_LINE "end note" END_LINE
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//position=NotePosition (":" value=Text END_LINE) | "of" of=[Entity] END_LINE value=Text END_LINE "end note" END_LINE
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//position=NotePosition (":" value=Text END_LINE)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//position=NotePosition
		public Assignment getPositionAssignment_1_0_0_0() { return cPositionAssignment_1_0_0_0; }

		//NotePosition
		public RuleCall getPositionNotePositionEnumRuleCall_1_0_0_0_0() { return cPositionNotePositionEnumRuleCall_1_0_0_0_0; }

		//":" value=Text END_LINE
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//":"
		public Keyword getColonKeyword_1_0_0_1_0() { return cColonKeyword_1_0_0_1_0; }

		//value=Text
		public Assignment getValueAssignment_1_0_0_1_1() { return cValueAssignment_1_0_0_1_1; }

		//Text
		public RuleCall getValueTextParserRuleCall_1_0_0_1_1_0() { return cValueTextParserRuleCall_1_0_0_1_1_0; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_1_0_0_1_2() { return cEND_LINETerminalRuleCall_1_0_0_1_2; }

		//"of" of=[Entity] END_LINE value=Text END_LINE "end note" END_LINE
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"of"
		public Keyword getOfKeyword_1_0_1_0() { return cOfKeyword_1_0_1_0; }

		//of=[Entity]
		public Assignment getOfAssignment_1_0_1_1() { return cOfAssignment_1_0_1_1; }

		//[Entity]
		public CrossReference getOfEntityCrossReference_1_0_1_1_0() { return cOfEntityCrossReference_1_0_1_1_0; }

		//ID
		public RuleCall getOfEntityIDTerminalRuleCall_1_0_1_1_0_1() { return cOfEntityIDTerminalRuleCall_1_0_1_1_0_1; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_1_0_1_2() { return cEND_LINETerminalRuleCall_1_0_1_2; }

		//value=Text
		public Assignment getValueAssignment_1_0_1_3() { return cValueAssignment_1_0_1_3; }

		//Text
		public RuleCall getValueTextParserRuleCall_1_0_1_3_0() { return cValueTextParserRuleCall_1_0_1_3_0; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_1_0_1_4() { return cEND_LINETerminalRuleCall_1_0_1_4; }

		//"end note"
		public Keyword getEndNoteKeyword_1_0_1_5() { return cEndNoteKeyword_1_0_1_5; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_1_0_1_6() { return cEND_LINETerminalRuleCall_1_0_1_6; }

		//"as" name=ID END_LINE value=Text END_LINE "end note" END_LINE
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"as"
		public Keyword getAsKeyword_1_1_0() { return cAsKeyword_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_0; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_1_1_2() { return cEND_LINETerminalRuleCall_1_1_2; }

		//value=Text
		public Assignment getValueAssignment_1_1_3() { return cValueAssignment_1_1_3; }

		//Text
		public RuleCall getValueTextParserRuleCall_1_1_3_0() { return cValueTextParserRuleCall_1_1_3_0; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_1_1_4() { return cEND_LINETerminalRuleCall_1_1_4; }

		//"end note"
		public Keyword getEndNoteKeyword_1_1_5() { return cEndNoteKeyword_1_1_5; }

		//END_LINE
		public RuleCall getEND_LINETerminalRuleCall_1_1_6() { return cEND_LINETerminalRuleCall_1_1_6; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNativeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNativeNativeTypeEnumRuleCall_0_0_0 = (RuleCall)cNativeAssignment_0_0.eContents().get(0);
		private final Assignment cEntityAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_0_1_0 = (CrossReference)cEntityAssignment_0_1.eContents().get(0);
		private final RuleCall cEntityEntityQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cEntityEntityCrossReference_0_1_0.eContents().get(1);
		private final Assignment cIsArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cIsArrayAssignment_1.eContents().get(0);
		
		////END: note rules
		//DataType:
		//	(native=NativeType | entity=[Entity|QualifiedName]) isArray?="[]"?;
		@Override public ParserRule getRule() { return rule; }

		//(native=NativeType | entity=[Entity|QualifiedName]) isArray?="[]"?
		public Group getGroup() { return cGroup; }

		//native=NativeType | entity=[Entity|QualifiedName]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//native=NativeType
		public Assignment getNativeAssignment_0_0() { return cNativeAssignment_0_0; }

		//NativeType
		public RuleCall getNativeNativeTypeEnumRuleCall_0_0_0() { return cNativeNativeTypeEnumRuleCall_0_0_0; }

		//entity=[Entity|QualifiedName]
		public Assignment getEntityAssignment_0_1() { return cEntityAssignment_0_1; }

		//[Entity|QualifiedName]
		public CrossReference getEntityEntityCrossReference_0_1_0() { return cEntityEntityCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getEntityEntityQualifiedNameParserRuleCall_0_1_0_1() { return cEntityEntityQualifiedNameParserRuleCall_0_1_0_1; }

		//isArray?="[]"?
		public Assignment getIsArrayAssignment_1() { return cIsArrayAssignment_1; }

		//"[]"
		public Keyword getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0() { return cIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cUpKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDownKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTopKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBottomKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRightKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cNullKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cStringKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cNumberKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cIntegerKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cBooleanKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cDateKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cObjectKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cPackageKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cClassKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cEnumKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cNoteKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cAsKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cOfKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cColonKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cQuestionMarkKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cLeftSquareBracketKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cRightSquareBracketKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		
		//Text:
		//	(ID | STRING | ANY_OTHER | "up" | "down" | "top" | "bottom" | "left" | "right" | "null" | "string" | "number" |
		//	"integer" | "boolean" | "date" | "object" | "package" | "class" | "enum" | "note" | "as" | "of" | ":" | "?" | "[" |
		//	"]")+;
		@Override public ParserRule getRule() { return rule; }

		//(ID | STRING | ANY_OTHER | "up" | "down" | "top" | "bottom" | "left" | "right" | "null" | "string" | "number" |
		//"integer" | "boolean" | "date" | "object" | "package" | "class" | "enum" | "note" | "as" | "of" | ":" | "?" | "[" |
		//"]")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_2() { return cANY_OTHERTerminalRuleCall_2; }

		//"up"
		public Keyword getUpKeyword_3() { return cUpKeyword_3; }

		//"down"
		public Keyword getDownKeyword_4() { return cDownKeyword_4; }

		//"top"
		public Keyword getTopKeyword_5() { return cTopKeyword_5; }

		//"bottom"
		public Keyword getBottomKeyword_6() { return cBottomKeyword_6; }

		//"left"
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }

		//"right"
		public Keyword getRightKeyword_8() { return cRightKeyword_8; }

		//"null"
		public Keyword getNullKeyword_9() { return cNullKeyword_9; }

		//"string"
		public Keyword getStringKeyword_10() { return cStringKeyword_10; }

		//"number"
		public Keyword getNumberKeyword_11() { return cNumberKeyword_11; }

		//"integer"
		public Keyword getIntegerKeyword_12() { return cIntegerKeyword_12; }

		//"boolean"
		public Keyword getBooleanKeyword_13() { return cBooleanKeyword_13; }

		//"date"
		public Keyword getDateKeyword_14() { return cDateKeyword_14; }

		//"object"
		public Keyword getObjectKeyword_15() { return cObjectKeyword_15; }

		//"package"
		public Keyword getPackageKeyword_16() { return cPackageKeyword_16; }

		//"class"
		public Keyword getClassKeyword_17() { return cClassKeyword_17; }

		//"enum"
		public Keyword getEnumKeyword_18() { return cEnumKeyword_18; }

		//"note"
		public Keyword getNoteKeyword_19() { return cNoteKeyword_19; }

		//"as"
		public Keyword getAsKeyword_20() { return cAsKeyword_20; }

		//"of"
		public Keyword getOfKeyword_21() { return cOfKeyword_21; }

		//":"
		public Keyword getColonKeyword_22() { return cColonKeyword_22; }

		//"?"
		public Keyword getQuestionMarkKeyword_23() { return cQuestionMarkKeyword_23; }

		//"["
		public Keyword getLeftSquareBracketKeyword_24() { return cLeftSquareBracketKeyword_24; }

		//"]"
		public Keyword getRightSquareBracketKeyword_25() { return cRightSquareBracketKeyword_25; }
	}
	
	
	public class PackageStyleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PackageStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNodeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNodeNodeKeyword_0_0 = (Keyword)cNodeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRectEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRectRectKeyword_1_0 = (Keyword)cRectEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFolderEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFolderFolderKeyword_2_0 = (Keyword)cFolderEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFrameEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFrameFrameKeyword_3_0 = (Keyword)cFrameEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCloudEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCloudCloudKeyword_4_0 = (Keyword)cCloudEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDatabaseEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDatabaseDatabaseKeyword_5_0 = (Keyword)cDatabaseEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PackageStyle:
		//	Node | Rect | Folder | Frame | Cloud | Database;
		public EnumRule getRule() { return rule; }

		//Node | Rect | Folder | Frame | Cloud | Database
		public Alternatives getAlternatives() { return cAlternatives; }

		//Node
		public EnumLiteralDeclaration getNodeEnumLiteralDeclaration_0() { return cNodeEnumLiteralDeclaration_0; }

		//"Node"
		public Keyword getNodeNodeKeyword_0_0() { return cNodeNodeKeyword_0_0; }

		//Rect
		public EnumLiteralDeclaration getRectEnumLiteralDeclaration_1() { return cRectEnumLiteralDeclaration_1; }

		//"Rect"
		public Keyword getRectRectKeyword_1_0() { return cRectRectKeyword_1_0; }

		//Folder
		public EnumLiteralDeclaration getFolderEnumLiteralDeclaration_2() { return cFolderEnumLiteralDeclaration_2; }

		//"Folder"
		public Keyword getFolderFolderKeyword_2_0() { return cFolderFolderKeyword_2_0; }

		//Frame
		public EnumLiteralDeclaration getFrameEnumLiteralDeclaration_3() { return cFrameEnumLiteralDeclaration_3; }

		//"Frame"
		public Keyword getFrameFrameKeyword_3_0() { return cFrameFrameKeyword_3_0; }

		//Cloud
		public EnumLiteralDeclaration getCloudEnumLiteralDeclaration_4() { return cCloudEnumLiteralDeclaration_4; }

		//"Cloud"
		public Keyword getCloudCloudKeyword_4_0() { return cCloudCloudKeyword_4_0; }

		//Database
		public EnumLiteralDeclaration getDatabaseEnumLiteralDeclaration_5() { return cDatabaseEnumLiteralDeclaration_5; }

		//"Database"
		public Keyword getDatabaseDatabaseKeyword_5_0() { return cDatabaseDatabaseKeyword_5_0; }
	}

	public class CompTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCompEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCompAsteriskKeyword_1_0 = (Keyword)cCompEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAgreEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAgreOKeyword_2_0 = (Keyword)cAgreEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CompType:
		//	none | comp="*" | agre="o";
		public EnumRule getRule() { return rule; }

		//none | comp="*" | agre="o"
		public Alternatives getAlternatives() { return cAlternatives; }

		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//comp="*"
		public EnumLiteralDeclaration getCompEnumLiteralDeclaration_1() { return cCompEnumLiteralDeclaration_1; }

		//"*"
		public Keyword getCompAsteriskKeyword_1_0() { return cCompAsteriskKeyword_1_0; }

		//agre="o"
		public EnumLiteralDeclaration getAgreEnumLiteralDeclaration_2() { return cAgreEnumLiteralDeclaration_2; }

		//"o"
		public Keyword getAgreOKeyword_2_0() { return cAgreOKeyword_2_0; }
	}

	public class NotePositionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NotePosition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTopEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTopTopKeyword_0_0 = (Keyword)cTopEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBottomEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBottomBottomKeyword_1_0 = (Keyword)cBottomEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLeftLeftKeyword_2_0 = (Keyword)cLeftEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRightRightKeyword_3_0 = (Keyword)cRightEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum NotePosition:
		//	top | bottom | left | right;
		public EnumRule getRule() { return rule; }

		//top | bottom | left | right
		public Alternatives getAlternatives() { return cAlternatives; }

		//top
		public EnumLiteralDeclaration getTopEnumLiteralDeclaration_0() { return cTopEnumLiteralDeclaration_0; }

		//"top"
		public Keyword getTopTopKeyword_0_0() { return cTopTopKeyword_0_0; }

		//bottom
		public EnumLiteralDeclaration getBottomEnumLiteralDeclaration_1() { return cBottomEnumLiteralDeclaration_1; }

		//"bottom"
		public Keyword getBottomBottomKeyword_1_0() { return cBottomBottomKeyword_1_0; }

		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_2() { return cLeftEnumLiteralDeclaration_2; }

		//"left"
		public Keyword getLeftLeftKeyword_2_0() { return cLeftLeftKeyword_2_0; }

		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_3() { return cRightEnumLiteralDeclaration_3; }

		//"right"
		public Keyword getRightRightKeyword_3_0() { return cRightRightKeyword_3_0; }
	}

	public class NativeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NativeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNumberNumberKeyword_1_0 = (Keyword)cNumberEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBooleanBooleanKeyword_3_0 = (Keyword)cBooleanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateDateKeyword_4_0 = (Keyword)cDateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cObjectEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cObjectObjectKeyword_5_0 = (Keyword)cObjectEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum NativeType:
		//	string | number | integer | boolean | date | object;
		public EnumRule getRule() { return rule; }

		//string | number | integer | boolean | date | object
		public Alternatives getAlternatives() { return cAlternatives; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//"string"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//number
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_1() { return cNumberEnumLiteralDeclaration_1; }

		//"number"
		public Keyword getNumberNumberKeyword_1_0() { return cNumberNumberKeyword_1_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_3() { return cBooleanEnumLiteralDeclaration_3; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_3_0() { return cBooleanBooleanKeyword_3_0; }

		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_4() { return cDateEnumLiteralDeclaration_4; }

		//"date"
		public Keyword getDateDateKeyword_4_0() { return cDateDateKeyword_4_0; }

		//object
		public EnumLiteralDeclaration getObjectEnumLiteralDeclaration_5() { return cObjectEnumLiteralDeclaration_5; }

		//"object"
		public Keyword getObjectObjectKeyword_5_0() { return cObjectObjectKeyword_5_0; }
	}
	
	private final DomainModelElements pDomainModel;
	private final ElementElements pElement;
	private final NodeElements pNode;
	private final EntityElements pEntity;
	private final CPackageElements pCPackage;
	private final PackageStyleElements unknownRulePackageStyle;
	private final RelationElements pRelation;
	private final RelationParseElements pRelationParse;
	private final RelationTypeElements pRelationType;
	private final CompTypeElements unknownRuleCompType;
	private final StrongRelElements pStrongRel;
	private final WeakRelElements pWeakRel;
	private final EnumerElements pEnumer;
	private final ClazzElements pClazz;
	private final PropertyElements pProperty;
	private final EntityListElements pEntityList;
	private final NoteElements pNote;
	private final NotePositionElements unknownRuleNotePosition;
	private final DataTypeElements pDataType;
	private final NativeTypeElements unknownRuleNativeType;
	private final QualifiedNameElements pQualifiedName;
	private final TextElements pText;
	private final TerminalRule tID;
	private final TerminalRule tWS;
	private final TerminalRule tEND_LINE;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tMULTI;
	private final TerminalRule tSTRING;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ClassDiagramGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDomainModel = new DomainModelElements();
		this.pElement = new ElementElements();
		this.pNode = new NodeElements();
		this.pEntity = new EntityElements();
		this.pCPackage = new CPackageElements();
		this.unknownRulePackageStyle = new PackageStyleElements();
		this.pRelation = new RelationElements();
		this.pRelationParse = new RelationParseElements();
		this.pRelationType = new RelationTypeElements();
		this.unknownRuleCompType = new CompTypeElements();
		this.pStrongRel = new StrongRelElements();
		this.pWeakRel = new WeakRelElements();
		this.pEnumer = new EnumerElements();
		this.pClazz = new ClazzElements();
		this.pProperty = new PropertyElements();
		this.pEntityList = new EntityListElements();
		this.pNote = new NoteElements();
		this.unknownRuleNotePosition = new NotePositionElements();
		this.pDataType = new DataTypeElements();
		this.unknownRuleNativeType = new NativeTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pText = new TextElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tEND_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END_LINE");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tMULTI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MULTI");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("rethink.uml.ClassDiagram".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//DomainModel:
	//	"@startuml" {DomainModel} file=STRING? END_LINE packages+=CPackage+ "@enduml";
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}

	//Element:
	//	Relation | Node;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Node:
	//	CPackage | Entity | Note;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//Entity:
	//	Enumer | Clazz;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//CPackage:
	//	"package" name=QualifiedName ("<<" style=PackageStyle ">>")? "{" END_LINE elements+=Element* "}" END_LINE;
	public CPackageElements getCPackageAccess() {
		return pCPackage;
	}
	
	public ParserRule getCPackageRule() {
		return getCPackageAccess().getRule();
	}

	//enum PackageStyle:
	//	Node | Rect | Folder | Frame | Cloud | Database;
	public PackageStyleElements getPackageStyleAccess() {
		return unknownRulePackageStyle;
	}
	
	public EnumRule getPackageStyleRule() {
		return getPackageStyleAccess().getRule();
	}

	////BEGIN: relation rules
	//Relation:
	//	leftRef=[Node|QualifiedName] relType=RelationParse rightRef=[Node|QualifiedName] (":" name=Text)? END_LINE;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//RelationParse hidden():
	//	comp=CompType type=RelationType direct?=">"? WS multi=MULTI? | type=RelationType (direct?=">" | ext?="|>")? WS
	//	multi=MULTI?;
	public RelationParseElements getRelationParseAccess() {
		return pRelationParse;
	}
	
	public ParserRule getRelationParseRule() {
		return getRelationParseAccess().getRule();
	}

	//RelationType hidden():
	//	strong?=StrongRel | weak?=WeakRel;
	public RelationTypeElements getRelationTypeAccess() {
		return pRelationType;
	}
	
	public ParserRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}

	//enum CompType:
	//	none | comp="*" | agre="o";
	public CompTypeElements getCompTypeAccess() {
		return unknownRuleCompType;
	}
	
	public EnumRule getCompTypeRule() {
		return getCompTypeAccess().getRule();
	}

	//StrongRel:
	//	"-" ("up" | "down" | "left" | "right")? "-"+;
	public StrongRelElements getStrongRelAccess() {
		return pStrongRel;
	}
	
	public ParserRule getStrongRelRule() {
		return getStrongRelAccess().getRule();
	}

	//WeakRel:
	//	"." ("up" | "down" | "left" | "right")? "."+;
	public WeakRelElements getWeakRelAccess() {
		return pWeakRel;
	}
	
	public ParserRule getWeakRelRule() {
		return getWeakRelAccess().getRule();
	}

	////END: relation rules
	////BEGIN: entity rules
	//Enumer:
	//	"enum" name=ID "{" END_LINE? (types+=ID END_LINE?)* "}" END_LINE;
	public EnumerElements getEnumerAccess() {
		return pEnumer;
	}
	
	public ParserRule getEnumerRule() {
		return getEnumerAccess().getRule();
	}

	//Clazz:
	//	"class" name=ID ("<<" stereotype=Text ">>")? ("{" END_LINE? properties+=Property* "}")? END_LINE;
	public ClazzElements getClazzAccess() {
		return pClazz;
	}
	
	public ParserRule getClazzRule() {
		return getClazzAccess().getRule();
	}

	//Property:
	//	name=ID (optional?="?"? (":" (type=DataType | entityList=EntityList))? | constant?="=" value=Text) END_LINE;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//EntityList:
	//	"[" refs+=[Entity|QualifiedName] ("|" refs+=[Entity|QualifiedName])* "]";
	public EntityListElements getEntityListAccess() {
		return pEntityList;
	}
	
	public ParserRule getEntityListRule() {
		return getEntityListAccess().getRule();
	}

	////END: entity rules
	////BEGIN: note rules
	//Note:
	//	"note" ((position=NotePosition (":" value=Text END_LINE) | "of" of=[Entity] END_LINE value=Text END_LINE "end note"
	//	END_LINE) | "as" name=ID END_LINE value=Text END_LINE "end note" END_LINE);
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//enum NotePosition:
	//	top | bottom | left | right;
	public NotePositionElements getNotePositionAccess() {
		return unknownRuleNotePosition;
	}
	
	public EnumRule getNotePositionRule() {
		return getNotePositionAccess().getRule();
	}

	////END: note rules
	//DataType:
	//	(native=NativeType | entity=[Entity|QualifiedName]) isArray?="[]"?;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//enum NativeType:
	//	string | number | integer | boolean | date | object;
	public NativeTypeElements getNativeTypeAccess() {
		return unknownRuleNativeType;
	}
	
	public EnumRule getNativeTypeRule() {
		return getNativeTypeAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Text:
	//	(ID | STRING | ANY_OTHER | "up" | "down" | "top" | "bottom" | "left" | "right" | "null" | "string" | "number" |
	//	"integer" | "boolean" | "date" | "object" | "package" | "class" | "enum" | "note" | "as" | "of" | ":" | "?" | "[" |
	//	"]")+;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal END_LINE:
	//	("\t" | "\r" | "\n")+;
	public TerminalRule getEND_LINERule() {
		return tEND_LINE;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal MULTI:
	//	"\"" (("0" | "1") "..")? ("1" | "*") "\"";
	public TerminalRule getMULTIRule() {
		return tMULTI;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
