/*
 * generated by Xtext
 */
grammar InternalClassDiagram;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package rethink.uml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package rethink.uml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import rethink.uml.services.ClassDiagramGrammarAccess;

}

@parser::members {

 	private ClassDiagramGrammarAccess grammarAccess;
 	
    public InternalClassDiagramParser(TokenStream input, ClassDiagramGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";	
   	}
   	
   	@Override
   	protected ClassDiagramGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	 iv_ruleDomainModel=ruleDomainModel 
	 { $current=$iv_ruleDomainModel.current; } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@startuml' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDomainModelAccess().getStartumlKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getDomainModelAccess().getDomainModelAction_1(),
            $current);
    }
)(
(
		lv_file_2_0=RULE_STRING
		{
			newLeafNode(lv_file_2_0, grammarAccess.getDomainModelAccess().getFileSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"file",
        		lv_file_2_0, 
        		"STRING");
	    }

)
)?this_END_LINE_3=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_3, grammarAccess.getDomainModelAccess().getEND_LINETerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainModelAccess().getPackagesCPackageParserRuleCall_4_0()); 
	    }
		lv_packages_4_0=ruleCPackage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainModelRule());
	        }
       		add(
       			$current, 
       			"packages",
        		lv_packages_4_0, 
        		"CPackage");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='@enduml' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDomainModelAccess().getEndumlKeyword_5());
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getRelationParserRuleCall_0()); 
    }
    this_Relation_0=ruleRelation
    { 
        $current = $this_Relation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getCPackageParserRuleCall_1()); 
    }
    this_CPackage_1=ruleCPackage
    { 
        $current = $this_CPackage_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getEntityAndNoteParserRuleCall_2()); 
    }
    this_EntityAndNote_2=ruleEntityAndNote
    { 
        $current = $this_EntityAndNote_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntityAndNote
entryRuleEntityAndNote returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityAndNoteRule()); }
	 iv_ruleEntityAndNote=ruleEntityAndNote 
	 { $current=$iv_ruleEntityAndNote.current; } 
	 EOF 
;

// Rule EntityAndNote
ruleEntityAndNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntityAndNoteAccess().getEntityParserRuleCall_0()); 
    }
    this_Entity_0=ruleEntity
    { 
        $current = $this_Entity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAndNoteAccess().getNoteParserRuleCall_1()); 
    }
    this_Note_1=ruleNote
    { 
        $current = $this_Note_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getEnumerParserRuleCall_0()); 
    }
    this_Enumer_0=ruleEnumer
    { 
        $current = $this_Enumer_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getClazzParserRuleCall_1()); 
    }
    this_Clazz_1=ruleClazz
    { 
        $current = $this_Clazz_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCPackage
entryRuleCPackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCPackageRule()); }
	 iv_ruleCPackage=ruleCPackage 
	 { $current=$iv_ruleCPackage.current; } 
	 EOF 
;

// Rule CPackage
ruleCPackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCPackageAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCPackageAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCPackageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='<<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCPackageAccess().getLessThanSignLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCPackageAccess().getStylePackageStyleEnumRuleCall_2_1_0()); 
	    }
		lv_style_3_0=rulePackageStyle		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCPackageRule());
	        }
       		set(
       			$current, 
       			"style",
        		lv_style_3_0, 
        		"PackageStyle");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCPackageAccess().getGreaterThanSignGreaterThanSignKeyword_2_2());
    }
)?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCPackageAccess().getLeftCurlyBracketKeyword_3());
    }
this_END_LINE_6=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_6, grammarAccess.getCPackageAccess().getEND_LINETerminalRuleCall_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCPackageAccess().getElementsElementParserRuleCall_5_0()); 
	    }
		lv_elements_7_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCPackageRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_7_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCPackageAccess().getRightCurlyBracketKeyword_6());
    }
this_END_LINE_9=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_9, grammarAccess.getCPackageAccess().getEND_LINETerminalRuleCall_7()); 
    }
)
;





// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	 iv_ruleRelation=ruleRelation 
	 { $current=$iv_ruleRelation.current; } 
	 EOF 
;

// Rule Relation
ruleRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getLeftRefEntityAndNoteCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getRelTypeRelationParseParserRuleCall_1_0()); 
	    }
		lv_relType_1_0=ruleRelationParse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"relType",
        		lv_relType_1_0, 
        		"RelationParse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getRightRefEntityAndNoteCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRelationAccess().getColonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getNameTextParserRuleCall_3_1_0()); 
	    }
		lv_name_4_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
))?this_END_LINE_5=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_5, grammarAccess.getRelationAccess().getEND_LINETerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleRelationParse
entryRuleRelationParse returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getRelationParseRule()); }
	 iv_ruleRelationParse=ruleRelationParse 
	 { $current=$iv_ruleRelationParse.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RelationParse
ruleRelationParse returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationParseAccess().getCompCompTypeEnumRuleCall_0_0_0()); 
	    }
		lv_comp_0_0=ruleCompType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationParseRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_0_0, 
        		"CompType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationParseAccess().getTypeRelationTypeParserRuleCall_0_1_0()); 
	    }
		lv_type_1_0=ruleRelationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationParseRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"RelationType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_direct_2_0=	'>' 
    {
        newLeafNode(lv_direct_2_0, grammarAccess.getRelationParseAccess().getDirectGreaterThanSignKeyword_0_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationParseRule());
	        }
       		setWithLastConsumed($current, "direct", true, ">");
	    }

)
)?this_WS_3=RULE_WS
    { 
    newLeafNode(this_WS_3, grammarAccess.getRelationParseAccess().getWSTerminalRuleCall_0_3()); 
    }
(
(
		lv_multi_4_0=RULE_MULTI
		{
			newLeafNode(lv_multi_4_0, grammarAccess.getRelationParseAccess().getMultiMULTITerminalRuleCall_0_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationParseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"multi",
        		lv_multi_4_0, 
        		"MULTI");
	    }

)
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationParseAccess().getTypeRelationTypeParserRuleCall_1_0_0()); 
	    }
		lv_type_5_0=ruleRelationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationParseRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"RelationType");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_direct_6_0=	'>' 
    {
        newLeafNode(lv_direct_6_0, grammarAccess.getRelationParseAccess().getDirectGreaterThanSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationParseRule());
	        }
       		setWithLastConsumed($current, "direct", true, ">");
	    }

)
)
    |(
(
		lv_ext_7_0=	'|>' 
    {
        newLeafNode(lv_ext_7_0, grammarAccess.getRelationParseAccess().getExtVerticalLineGreaterThanSignKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationParseRule());
	        }
       		setWithLastConsumed($current, "ext", true, "|>");
	    }

)
))?this_WS_8=RULE_WS
    { 
    newLeafNode(this_WS_8, grammarAccess.getRelationParseAccess().getWSTerminalRuleCall_1_2()); 
    }
(
(
		lv_multi_9_0=RULE_MULTI
		{
			newLeafNode(lv_multi_9_0, grammarAccess.getRelationParseAccess().getMultiMULTITerminalRuleCall_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationParseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"multi",
        		lv_multi_9_0, 
        		"MULTI");
	    }

)
)?))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleRelationType
entryRuleRelationType returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getRelationTypeRule()); }
	 iv_ruleRelationType=ruleRelationType 
	 { $current=$iv_ruleRelationType.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RelationType
ruleRelationType returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationTypeAccess().getStrongStrongRelParserRuleCall_0_0()); 
	    }
		lv_strong_0_0=ruleStrongRel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationTypeRule());
	        }
       		set(
       			$current, 
       			"strong",
        		true, 
        		"StrongRel");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationTypeAccess().getWeakWeakRelParserRuleCall_1_0()); 
	    }
		lv_weak_1_0=ruleWeakRel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationTypeRule());
	        }
       		set(
       			$current, 
       			"weak",
        		true, 
        		"WeakRel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleStrongRel
entryRuleStrongRel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrongRelRule()); } 
	 iv_ruleStrongRel=ruleStrongRel 
	 { $current=$iv_ruleStrongRel.current.getText(); }  
	 EOF 
;

// Rule StrongRel
ruleStrongRel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrongRelAccess().getHyphenMinusKeyword_0()); 
    }
(
	kw='up' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrongRelAccess().getUpKeyword_1_0()); 
    }

    |
	kw='down' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrongRelAccess().getDownKeyword_1_1()); 
    }

    |
	kw='left' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrongRelAccess().getLeftKeyword_1_2()); 
    }

    |
	kw='right' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrongRelAccess().getRightKeyword_1_3()); 
    }
)?(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStrongRelAccess().getHyphenMinusKeyword_2()); 
    }
)+)
    ;





// Entry rule entryRuleWeakRel
entryRuleWeakRel returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakRelRule()); } 
	 iv_ruleWeakRel=ruleWeakRel 
	 { $current=$iv_ruleWeakRel.current.getText(); }  
	 EOF 
;

// Rule WeakRel
ruleWeakRel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWeakRelAccess().getFullStopKeyword_0()); 
    }
(
	kw='up' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWeakRelAccess().getUpKeyword_1_0()); 
    }

    |
	kw='down' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWeakRelAccess().getDownKeyword_1_1()); 
    }

    |
	kw='left' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWeakRelAccess().getLeftKeyword_1_2()); 
    }

    |
	kw='right' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWeakRelAccess().getRightKeyword_1_3()); 
    }
)?(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWeakRelAccess().getFullStopKeyword_2()); 
    }
)+)
    ;





// Entry rule entryRuleEnumer
entryRuleEnumer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerRule()); }
	 iv_ruleEnumer=ruleEnumer 
	 { $current=$iv_ruleEnumer.current; } 
	 EOF 
;

// Rule Enumer
ruleEnumer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumerAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumerAccess().getLeftCurlyBracketKeyword_2());
    }
(this_END_LINE_3=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_3, grammarAccess.getEnumerAccess().getEND_LINETerminalRuleCall_3()); 
    }
)?((
(
		lv_types_4_0=RULE_ID
		{
			newLeafNode(lv_types_4_0, grammarAccess.getEnumerAccess().getTypesIDTerminalRuleCall_4_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"ID");
	    }

)
)(this_END_LINE_5=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_5, grammarAccess.getEnumerAccess().getEND_LINETerminalRuleCall_4_1()); 
    }
)?)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumerAccess().getRightCurlyBracketKeyword_5());
    }
this_END_LINE_7=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_7, grammarAccess.getEnumerAccess().getEND_LINETerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleClazz
entryRuleClazz returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClazzRule()); }
	 iv_ruleClazz=ruleClazz 
	 { $current=$iv_ruleClazz.current; } 
	 EOF 
;

// Rule Clazz
ruleClazz returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClazzAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClazzAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClazzRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='<<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClazzAccess().getLessThanSignLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClazzAccess().getStereotypeTextParserRuleCall_2_1_0()); 
	    }
		lv_stereotype_3_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClazzRule());
	        }
       		set(
       			$current, 
       			"stereotype",
        		lv_stereotype_3_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClazzAccess().getGreaterThanSignGreaterThanSignKeyword_2_2());
    }
)?(	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClazzAccess().getLeftCurlyBracketKeyword_3_0());
    }
(this_END_LINE_6=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_6, grammarAccess.getClazzAccess().getEND_LINETerminalRuleCall_3_1()); 
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClazzAccess().getPropertiesPropertyParserRuleCall_3_2_0()); 
	    }
		lv_properties_7_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClazzRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_7_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClazzAccess().getRightCurlyBracketKeyword_3_3());
    }
)?this_END_LINE_9=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_9, grammarAccess.getClazzAccess().getEND_LINETerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(((
(
		lv_optional_1_0=	'?' 
    {
        newLeafNode(lv_optional_1_0, grammarAccess.getPropertyAccess().getOptionalQuestionMarkKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "optional", true, "?");
	    }

)
)?(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getColonKeyword_1_0_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTypeDataTypeParserRuleCall_1_0_1_1_0_0()); 
	    }
		lv_type_3_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getEntityEntityCrossReference_1_0_1_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getEntityListEntityListParserRuleCall_1_0_1_1_2_0()); 
	    }
		lv_entityList_5_0=ruleEntityList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"entityList",
        		lv_entityList_5_0, 
        		"EntityList");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
    |((
(
		lv_constant_6_0=	'=' 
    {
        newLeafNode(lv_constant_6_0, grammarAccess.getPropertyAccess().getConstantEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "constant", true, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getValueTextParserRuleCall_1_1_1_0()); 
	    }
		lv_value_7_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)))this_END_LINE_8=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_8, grammarAccess.getPropertyAccess().getEND_LINETerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleEntityList
entryRuleEntityList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityListRule()); }
	 iv_ruleEntityList=ruleEntityList 
	 { $current=$iv_ruleEntityList.current; } 
	 EOF 
;

// Rule EntityList
ruleEntityList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntityListAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityListRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEntityListAccess().getRefsEntityCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEntityListAccess().getVerticalLineKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityListRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEntityListAccess().getRefsEntityCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEntityListAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current; } 
	 EOF 
;

// Rule Note
ruleNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='note' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNoteAccess().getNoteKeyword_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getNoteAccess().getPositionNotePositionEnumRuleCall_1_0_0_0_0()); 
	    }
		lv_position_1_0=ruleNotePosition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoteRule());
	        }
       		set(
       			$current, 
       			"position",
        		lv_position_1_0, 
        		"NotePosition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNoteAccess().getColonKeyword_1_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoteAccess().getValueTextParserRuleCall_1_0_0_1_1_0()); 
	    }
		lv_value_3_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoteRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)this_END_LINE_4=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_4, grammarAccess.getNoteAccess().getEND_LINETerminalRuleCall_1_0_0_1_2()); 
    }
))
    |(	otherlv_5='of' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNoteAccess().getOfKeyword_1_0_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getNoteAccess().getOfEntityCrossReference_1_0_1_1_0()); 
	}

)
)this_END_LINE_7=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_7, grammarAccess.getNoteAccess().getEND_LINETerminalRuleCall_1_0_1_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoteAccess().getValueTextParserRuleCall_1_0_1_3_0()); 
	    }
		lv_value_8_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoteRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)this_END_LINE_9=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_9, grammarAccess.getNoteAccess().getEND_LINETerminalRuleCall_1_0_1_4()); 
    }
	otherlv_10='end note' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNoteAccess().getEndNoteKeyword_1_0_1_5());
    }
this_END_LINE_11=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_11, grammarAccess.getNoteAccess().getEND_LINETerminalRuleCall_1_0_1_6()); 
    }
))
    |(	otherlv_12='as' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getNoteAccess().getAsKeyword_1_1_0());
    }
(
(
		lv_name_13_0=RULE_ID
		{
			newLeafNode(lv_name_13_0, grammarAccess.getNoteAccess().getNameIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_13_0, 
        		"ID");
	    }

)
)this_END_LINE_14=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_14, grammarAccess.getNoteAccess().getEND_LINETerminalRuleCall_1_1_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoteAccess().getValueTextParserRuleCall_1_1_3_0()); 
	    }
		lv_value_15_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoteRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_15_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)this_END_LINE_16=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_16, grammarAccess.getNoteAccess().getEND_LINETerminalRuleCall_1_1_4()); 
    }
	otherlv_17='end note' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getNoteAccess().getEndNoteKeyword_1_1_5());
    }
this_END_LINE_18=RULE_END_LINE
    { 
    newLeafNode(this_END_LINE_18, grammarAccess.getNoteAccess().getEND_LINETerminalRuleCall_1_1_6()); 
    }
)))
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeAccess().getNativeNativeTypeEnumRuleCall_0_0()); 
	    }
		lv_native_0_0=ruleNativeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeRule());
	        }
       		set(
       			$current, 
       			"native",
        		lv_native_0_0, 
        		"NativeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isArray_1_0=	'[]' 
    {
        newLeafNode(lv_isArray_1_0, grammarAccess.getDataTypeAccess().getIsArrayLeftSquareBracketRightSquareBracketKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeRule());
	        }
       		setWithLastConsumed($current, "isArray", true, "[]");
	    }

)
)?)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleText
entryRuleText returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextRule()); } 
	 iv_ruleText=ruleText 
	 { $current=$iv_ruleText.current.getText(); }  
	 EOF 
;

// Rule Text
ruleText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getTextAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getTextAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |    this_ANY_OTHER_2=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_2);
    }

    { 
    newLeafNode(this_ANY_OTHER_2, grammarAccess.getTextAccess().getANY_OTHERTerminalRuleCall_2()); 
    }

    |
	kw='up' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getUpKeyword_3()); 
    }

    |
	kw='down' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getDownKeyword_4()); 
    }

    |
	kw='top' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getTopKeyword_5()); 
    }

    |
	kw='bottom' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getBottomKeyword_6()); 
    }

    |
	kw='left' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getLeftKeyword_7()); 
    }

    |
	kw='right' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getRightKeyword_8()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getNullKeyword_9()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getStringKeyword_10()); 
    }

    |
	kw='number' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getNumberKeyword_11()); 
    }

    |
	kw='integer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getIntegerKeyword_12()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getBooleanKeyword_13()); 
    }

    |
	kw='package' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getPackageKeyword_14()); 
    }

    |
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getClassKeyword_15()); 
    }

    |
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getEnumKeyword_16()); 
    }

    |
	kw='note' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getNoteKeyword_17()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getAsKeyword_18()); 
    }

    |
	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getOfKeyword_19()); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getColonKeyword_20()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTextAccess().getQuestionMarkKeyword_21()); 
    }
)+
    ;





// Rule PackageStyle
rulePackageStyle returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Node' 
	{
        $current = grammarAccess.getPackageStyleAccess().getNodeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPackageStyleAccess().getNodeEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Rect' 
	{
        $current = grammarAccess.getPackageStyleAccess().getRectEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPackageStyleAccess().getRectEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Folder' 
	{
        $current = grammarAccess.getPackageStyleAccess().getFolderEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPackageStyleAccess().getFolderEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Frame' 
	{
        $current = grammarAccess.getPackageStyleAccess().getFrameEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPackageStyleAccess().getFrameEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Cloud' 
	{
        $current = grammarAccess.getPackageStyleAccess().getCloudEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPackageStyleAccess().getCloudEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Database' 
	{
        $current = grammarAccess.getPackageStyleAccess().getDatabaseEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getPackageStyleAccess().getDatabaseEnumLiteralDeclaration_5()); 
    }
));



// Rule CompType
ruleCompType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getCompTypeAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompTypeAccess().getNoneEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='*' 
	{
        $current = grammarAccess.getCompTypeAccess().getCompEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompTypeAccess().getCompEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='o' 
	{
        $current = grammarAccess.getCompTypeAccess().getAgreEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompTypeAccess().getAgreEnumLiteralDeclaration_2()); 
    }
));



// Rule NotePosition
ruleNotePosition returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='top' 
	{
        $current = grammarAccess.getNotePositionAccess().getTopEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNotePositionAccess().getTopEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bottom' 
	{
        $current = grammarAccess.getNotePositionAccess().getBottomEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNotePositionAccess().getBottomEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='left' 
	{
        $current = grammarAccess.getNotePositionAccess().getLeftEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getNotePositionAccess().getLeftEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='right' 
	{
        $current = grammarAccess.getNotePositionAccess().getRightEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getNotePositionAccess().getRightEnumLiteralDeclaration_3()); 
    }
));



// Rule NativeType
ruleNativeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='string' 
	{
        $current = grammarAccess.getNativeTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNativeTypeAccess().getStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='number' 
	{
        $current = grammarAccess.getNativeTypeAccess().getNumberEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNativeTypeAccess().getNumberEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='integer' 
	{
        $current = grammarAccess.getNativeTypeAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getNativeTypeAccess().getIntegerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='boolean' 
	{
        $current = grammarAccess.getNativeTypeAccess().getBooleanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getNativeTypeAccess().getBooleanEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t')+;

RULE_END_LINE : ('\t'|'\r'|'\n')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_MULTI : '"' (('0'|'1') '..')? ('1'|'*') '"';

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_ANY_OTHER : .;


