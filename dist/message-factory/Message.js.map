{"version":3,"sources":["message-factory/Message.js"],"names":["_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","exports","MessageType","Message","undefined","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_RethinkObject2","require","_RethinkObject3","_RethinkObject","id","from","toList","type","body","this","_this","getPrototypeOf","to","token","identity","Error","newBody","idToken","assertedIdentity","accessToken","CREATE","READ","UPDATE","DELETE","SUBSCRIBE","UNSUBSCRIBE","RESPONSE","FORWARD","EXECUTE"],"mappings":"AAAA,YAA+uB,SAASA,wBAAuBC,GAAK,MAAOA,IAAKA,EAAIC,WAAWD,GAAKE,UAAQF,GAAM,QAASG,iBAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAAuC,QAASC,4BAA2BC,EAAKC,GAAM,IAAID,EAAM,KAAM,IAAIE,gBAAe,4DAA8D,QAAOD,GAAqB,gBAAPA,IAA+B,kBAAPA,GAAwBD,EAALC,EAAW,QAASE,WAAUC,EAASC,GAAY,GAAuB,kBAAbA,IAAsC,OAAbA,EAAmB,KAAM,IAAIP,WAAU,iEAAkEO,GAAaD,GAASE,UAAUC,OAAOC,OAAOH,GAAYA,EAAWC,WAAWG,aAAaC,MAAMN,EAASO,YAAW,EAAMC,UAAS,EAAKC,cAAa,KAAWR,IAAWE,OAAOO,eAAeP,OAAOO,eAAeV,EAASC,GAAYD,EAASW,UAAUV,GAAvlDE,OAAOS,eAAeC,QAAQ,cAAcP,OAAM,IAAOO,QAAQC,YAAYD,QAAQE,QAAQC,MAAU,IAAIC,cAAa,WAAW,QAASC,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWhB,WAAWgB,EAAWhB,aAAY,EAAMgB,EAAWd,cAAa,EAAQ,SAAUc,KAAWA,EAAWf,UAAS,GAAKL,OAAOS,eAAeO,EAAOI,EAAWC,IAAID,IAAc,MAAO,UAAS9B,EAAYgC,EAAWC,GAAuI,MAAvHD,IAAWP,EAAiBzB,EAAYS,UAAUuB,GAAeC,GAAYR,EAAiBzB,EAAYiC,GAAoBjC,MAsBhmBkC,gBAAAC,QAAA,qCAtBurBC,gBAAgB1C,uBAAuBwC,iBA8BjtBZ,QAJEF,QAIFE,QAJkB,SAASe,GAmBpC,QAAAf,GAAYgB,EAAIC,EAAMC,EAAQC,EAAMC,GAAM5C,gBAAA6C,KAAArB,EAAA,IAAAsB,GAAA1C,2BAAAyC,KAAAjC,OAAAmC,eAAAvB,GAAAlB,KAAAuC,MAAA,OAGtCC,GAAKN,GAAKA,EACVM,EAAKL,KAAOA,EACZK,EAAKE,GAAKN,EACVI,EAAKH,KAAOA,EACZG,EAAKF,KAAOA,EAP0BE,EAOmL,MA1BzKtC,WAAUgB,EAAQe,GAiBnEb,aAAaF,IAAUS,IAAI,iBAAiBlB,MAAM,SAmBtCkC,EAAOC,GAClB,IAAKD,IAAUC,EACX,KAAO,IAAIC,OAAM,sEAErB,IAAIC,GAAUP,KAAKD,IAMnB,OAJAQ,GAAQC,QAAU,KAElBD,EAAQE,iBAAmBJ,EAC3BL,KAAKD,KAAOQ,EACLP,QAxBLZ,IAAI,aAAalB,MAAM,SAgClBkC,GACP,IAAKA,EACD,KAAO,IAAIE,OAAM,+CACrB,IAAIC,GAAUP,KAAKD,IAGnB,OAFAQ,GAAQC,QAAUJ,EAClBJ,KAAKD,KAAOQ,EACLP,QAlCLZ,IAAI,iBAAiBlB,MAAM,SA0ClBkC,GACX,IAAKA,EACD,KAAO,IAAIE,OAAM,+CACrB,IAAIC,GAAUP,KAAKD,IAGnB,OAFAQ,GAAQG,YAAcN,EACtBJ,KAAKD,KAAOQ,EACLP,SAhDyNrB,GAAUc,gBAAAA,YAwDrOf,YAAAD,QAAAC,aACTiC,OAAQ,SAAUC,KAAM,OAAQC,OAAQ,SAAUC,OAAQ,SAAUC,UAAW,YAC/EC,YAAa,cAAeC,SAAU,WAAYC,QAAS,UAAWC,QAAS,UAvD0H1C,SAAAA,WA0D9LE","file":"message-factory/Message.js","sourcesContent":["/**\n * Copyright 2016 PT Inovação e Sistemas SA\n * Copyright 2016 INESC-ID\n * Copyright 2016 QUOBIS NETWORKS SL\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n * Copyright 2016 ORANGE SA\n * Copyright 2016 Deutsche Telekom AG\n * Copyright 2016 Apizee\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\nimport RethinkObject from '../reTHINKObject/RethinkObject.js';\n\n/**\n *\n * @author alice.cheambe[at]fokus.fraunhofer.de\n * The Message class is the representation of the reTHINK Message Data Model\n *\n */\nexport class Message extends RethinkObject {\n\n    /**\n     * Generates a message data object\n     *\n     * @param {String} id - To be used to associate Response messages to the initial request message.\n     * @param {URL.URL} from - URL of Hyperty instance or User associated with it\n     * @param {URL.URLList} toList - One or more URLs of Message recipients. According to the URL scheme it may be\n     * handled in different ways\n     * @param {MessageType} type - The URL of the reTHINK Data Object Resource associated with the message that can be\n     * used for routing purposes\n     * @param {MessageBody} body - Optionally, all message bodies exchanged between different Runtime Messge BUS can\n     * contain JWT tokens for Access Control for Identity Assertion purposes that are inserted by the Identity Module\n     * before the message is routed to proto stubs\n     */\n    constructor(id, from, toList, type, body) {\n        super();\n\n        this.id = id;\n        this.from = from;\n        this.to = toList;\n        this.type = type;\n        this.body = body;\n    }\n\n\n    /**\n     * Adds the asserted identity to the message body and removes the given token from the message\n     * @param {Identity.JWT} token - idToken to remove from message\n     * @param {Identity.Identity} identity - asserted identity to include\n     * @return {Message.Message} message - updated message\n     */\n    assertIdentity(token, identity) {\n        if (!token || !identity)\n            throw  new Error(\"message, token to be removed, and assertedIdentity must be provided\");\n        //console.log('given message', message);\n        let newBody = this.body;\n\n        newBody.idToken = null;\n\n        newBody.assertedIdentity = identity;\n        this.body = newBody;\n        return this;\n    }\n\n    /**\n     * Adds an Id token to the given message\n     * @param {Identity.JWT} token - identity token to include in the message\n     * @return {Message.Message} - the updated message\n     */\n    addIdToken(token) {\n        if (!token)\n            throw  new Error(\"message, token to be added, must be provided\");\n        let newBody = this.body;\n        newBody.idToken = token;\n        this.body = newBody;\n        return this;\n    }\n\n    /**\n     * Add an access token to the given message\n     * @param {Identity.JWT} token - token to be added to the given message\n     * @return {Message.Message} -  the updated Message\n     */\n    addAccessToken(token) {\n        if (!token)\n            throw  new Error(\"message, token to be added, must be provided\");\n        let newBody = this.body;\n        newBody.accessToken = token;\n        this.body = newBody;\n        return this;\n    }\n}\n\n/**\n * MessageType representing the type of message\n * @type {{CREATE: string, READ: string, UPDATE: string, DELETE: string, SUBSCRIBE: string, UNSUBSCRIBE: string, RESPONSE: string, FORWARD: string}}\n */\nexport const MessageType = {\n    CREATE: 'create', READ: 'read', UPDATE: 'update', DELETE: 'delete', SUBSCRIBE: 'subscribe',\n    UNSUBSCRIBE: 'unsubscribe', RESPONSE: 'response', FORWARD: 'forward', EXECUTE: 'execute'\n};\n\nexport default Message;\n"],"sourceRoot":"/source/"}