{"version":3,"sources":["message-factory/MessageFactory.js"],"names":["_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","exports","value","IdGenerator","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_Message","require","_Message2","_MessageBody","MessageFactory","this","myGenerator","idMaker","from","to","policy","Error","id","next","messageBody","CreateMessageBody","message","MessageType","CREATE","ForwardMessageBody","forwardMessage","FORWARD","resource","attribute","DeleteMessageBody","DELETE","UpdateMessageBody","UPDATE","ReadMessageBody","READ","MessageBody","SUBSCRIBE","UNSUBSCRIBE","method","params","ExecuteMessageBody","executeMessage","EXECUTE","code","source","response","ResponseMessageBody","RESPONSE","data","previousBody","body","idToken","accessToken","regeneratorRuntime","mark","index","wrap","_context","prev","stop"],"mappings":"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","file":"message-factory/MessageFactory.js","sourcesContent":["/**\n * Copyright 2016 PT Inovação e Sistemas SA\n * Copyright 2016 INESC-ID\n * Copyright 2016 QUOBIS NETWORKS SL\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n * Copyright 2016 ORANGE SA\n * Copyright 2016 Deutsche Telekom AG\n * Copyright 2016 Apizee\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\nimport Message from './Message.js';\nimport {MessageBody, CreateMessageBody, DeleteMessageBody, UpdateMessageBody, ReadMessageBody, ResponseMessageBody,\n    ForwardMessageBody, ExecuteMessageBody} from './MessageBody.js';\nimport {MessageType} from './Message.js';\n\n/**\n * @author alice.cheambe[at]fokus.fraunhofer.de\n * The MessageFactory creates messages according to the reTHINK Message Data Model to be sent through the Runtime\n * Message Bus.\n */\nclass MessageFactory {\n\n    /**\n     * Constructor to be used to instantiate an object of the Message Factory\n     */\n    constructor() {\n        this.myGenerator = new IdGenerator().idMaker();\n    }\n\n    /**\n     * Creates a Message of TYPE CREATE and Create Message Body\n     *\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList} to-  One or more URLs of Message recipients. According to the URL scheme it may be handled\n     * in different ways\n     * @param {String} value - Contains the created object in JSON format\n     * @param {URL.URL} policy - the sender of this message\n     */\n    createCreateMessageRequest(from, to, value, policy) {\n        if (!from || !to || !value)\n            throw  new Error(\"from, to, and value of object to be created MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new CreateMessageBody(value, policy, undefined, undefined, undefined, undefined, undefined);\n        let message = new Message(id, from, to, MessageType.CREATE, messageBody);\n        return message;\n    }\n\n    /**\n     * Creates a Message of TYPE FORWARD and Forward Message Body, which contains the message to be forwarded\n     *\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList} to-  One or more URLs of Message recipients. According to the URL scheme it may be handled\n     * in different ways\n     * @param message {Message.Message} message - the message to be forwarded\n     * @return {Message.Message} Message - the Forward Message Request\n     */\n    createForwardMessageRequest(from, to, message) {\n        if (!from || !to || !message)\n            throw  new Error(\"from, to, and message to forward MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new ForwardMessageBody(undefined, undefined, undefined, undefined, undefined, message);\n        let forwardMessage = new Message(id, from, to, MessageType.FORWARD, messageBody);\n        return forwardMessage;\n    }\n\n    /**\n     *  Create Delete Message of Type DELETE and delete message body\n     *\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList} to - One or more URLs of Message recipients. According to the URL scheme it may be handled\n     * in different ways\n     * @param {URL.URl} resource - URL of Data Object Resource associated with the message\n     * @param attribute - Identifies the attribute in the Object to be deleted\n     * @return {Message.Message} Message - the Delete Message Request\n     */\n    createDeleteMessageRequest(from, to, resource, attribute) {\n        if (!from || !to)\n            throw  new Error(\"from and to parameters MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new DeleteMessageBody(undefined, undefined, resource, attribute, undefined, undefined);\n        let message = new Message(id, from, to, MessageType.DELETE, messageBody);\n        return message;\n\n    }\n\n    /**\n     * Creates an Update Message Request\n     *\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList}to - One or more URLs of Message recipients. According to the URL scheme it may be handled in\n     * different ways\n     * @param value - The new value of the attribute to be updated\n     * @param {URL.URL} resource - URL of Data Object Resource associated with the message\n     * @param attribute - Identifies the attribute in the Object to be updated\n     * @return {Message.Message} Message - the Update message request\n     */\n    createUpdateMessageRequest(from, to, value, resource, attribute) {\n        if (!from || !to || !value)\n            throw  new Error(\"from, and to and value MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new UpdateMessageBody(undefined, undefined, resource, undefined, undefined, attribute, value);\n        let message = new Message(id, from, to, MessageType.UPDATE, messageBody);\n        return message;\n    }\n\n    /**\n     * Creates a Message of type READ\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList} to- One or more URLs of Message recipients. According to the URL scheme it may be handled in\n     * different ways\n     * @param {URL.URl} resource - URL of Data Object Resource associated with the message\n     * @param attribute - Identifies the attribute in the Object to be read\n     * @return {Message.Message} Message - the Read message request\n     */\n    createReadMessageRequest(from, to, resource, attribute) {\n        if (!from || !to || !resource)\n            throw  new Error(\"from, to and the resource to read from MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new ReadMessageBody(undefined, undefined, resource, undefined, undefined, attribute,\n            undefined, undefined);\n        let message = new Message(id, from, to, MessageType.READ, messageBody);\n        return message;\n    }\n\n    /**\n     * Creates a Message of type SUBSCRIBE\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList} to- One or more URLs of Message recipients. According to the URL scheme it may be handled in\n     * different ways\n     * @param {URL.URL} resource - URL of the object\n     */\n    createSubscribeMessageRequest(from, to, resource) {\n        if (!from || !to || !resource)\n            throw  new Error(\"from, to and the resource to subscribe to MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new MessageBody(undefined, undefined, resource, undefined, undefined);\n        let message = new Message(id, from, to, MessageType.SUBSCRIBE, messageBody);\n        return message;\n    }\n\n    /**\n     * Creates a Message of type UNSUBSCRIBE\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList} to- One or more URLs of Message recipients. According to the URL scheme it may be handled in\n     * different ways\n     * @param {URL.URL} resource - URL of the object\n     */\n    createUnsubscribeMessageRequest(from, to, resource) {\n        if (!from || !to || !resource)\n            throw  new Error(\"from, to and the resource to subscribe to MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new MessageBody(undefined, undefined, resource, undefined, undefined);\n        let message = new Message(id, from, to, MessageType.UNSUBSCRIBE, messageBody);\n        return message;\n    }\n\n    /**\n     * Creates a Message of type EXECUTE\n     * @param {URL.URL} from - the sender of this message\n     * @param {URL.URLList} to- One or more URLs of Message recipients. According to the URL scheme it may be handled in\n     * different ways\n     * @param {string} method -\n     * @param {Array} params -\n     */\n    createExecuteMessageRequest(from, to, method, params) {\n        if (!from || !to || !method)\n            throw  new Error(\"from, to and the method to execute MUST be specified\");\n\n        let id = \"\" + this.myGenerator.next().value;\n        let messageBody = new ExecuteMessageBody(undefined, undefined, undefined, undefined, undefined, method, params)\n        let executeMessage = new Message(id, from, to, MessageType.EXECUTE, messageBody);\n        return executeMessage;\n    }\n\n\n    /**\n     * Creates the response to the Message\n     * @param message - the message request from which the response should be generated\n     * @param code - the response code compliant with HTTP response codes (RFC7231).\n     * @param value - contains a data value in JSON format. Applicable to Responses to READ MessageType.\n     * @param source - Contains the original creator of the response. Useful to identify the real source of the\n     * response to a one-to-many message delivery ie multiple responses coming coming from different sources.\n     */\n    createMessageResponse(message, code, value, source) {\n        if (!code)\n            throw  new Error(\"response Code MUST be specified\");\n        let response = new ResponseMessageBody(undefined, undefined, undefined, code, value, source);\n        return new Message(message.id, message.to, message.from, MessageType.RESPONSE, response);\n    }\n\n\n    /**\n     * Generate a response to the given Message\n     * Request - Response transactions\n     * A Response to a Request message should follow this rule:\n     * Response.from = Request.to\n     * Response.to = Request.from\n     * Response.id = Request.id\n     * It should be note, the Request.id MUST be incremented every time a new Request message is created.\n     *\n     * @param {Message} data - Message to be updated\n     * @param {ResponseCode} code - response code compliant with HTTP response codes (RFC7231).\n     * @param {String} value - Contains a data value in JSON format.\n     *\n     */\n    generateMessageResponse(data, code, value) {\n        if (!data || !code)\n            throw new Error(\"message and response code MUST be specified\");\n\n        let previousBody = data.body;\n        let idToken = previousBody.idToken;\n        let accessToken = previousBody.accessToken;\n        let resource = previousBody.resource;\n\n        let response = new ResponseMessageBody(idToken, accessToken, resource, code, value);\n        let id = this.myGenerator.next().value;\n        return new Message(id, data.to, data.from, MessageType.RESPONSE, response);\n    }\n\n}\n\n/**\n * Message Identifier Generator that generates the id used to identifier message transactions\n */\nexport class IdGenerator {\n    *idMaker() {\n        let index = 1;\n        while (index < 1000000)\n            yield index++;\n    }\n}\n\nexport default MessageFactory;\n"],"sourceRoot":"/source/"}