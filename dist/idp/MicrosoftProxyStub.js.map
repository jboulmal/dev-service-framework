{"version":3,"sources":["idp/MicrosoftProxyStub.js"],"names":["_classCallCheck","instance","Constructor","TypeError","activate","url","bus","config","name","MicrosoftProxyStub","Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","identities","nIdentity","microsoftInfo","clientID","redirectURI","location","origin","tokenEndpoint","type","scope","mode","idp","validateAssertion","assertion","Promise","resolve","reject","idToken","JSON","parse","atob","identity","email","contents","generateAssertion","hint","hintSplited","split","idpBundle","domain","protocol","identityBundle","infoToken","m","requestUrl","loginUrl","runtimeProtoStubURL","this","_this","messageBus","addListener","msg","to","requestToIdp","params","body","method","usernameHint","then","replyMessage","error","message","id","from","code","postMessage","module"],"mappings":"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","file":"idp/MicrosoftProxyStub.js","sourcesContent":["let identities = {};\nlet nIdentity = 0;\n\nlet microsoftInfo = {\n  clientID:              '7e2f3589-4b38-4b1c-a321-c9251de00ef2',\n  redirectURI:           location.origin,\n  tokenEndpoint:         'https://login.windows.net/common/oauth2/authorize?',\n  type:                  'id_token',\n  scope:                 'openid',\n  mode:                  'fragment'\n};\n\n/**\n* Identity Provider Proxy\n*/\nlet idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: (assertion, origin) => {\n    return new Promise(function(resolve,reject) {\n\n      let idToken = JSON.parse(atob(assertion));\n\n      resolve({identity: idToken.email, contents: idToken});\n\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: (contents, origin, hint) => {\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function(resolve, reject) {\n      if (!hint) {\n        let m = microsoftInfo;\n\n        //let requestUrl = 'https://login.windows.net/common/oauth2/authorize?response_type=id_token&client_id=7e2f3589-4b38-4b1c-a321-c9251de00ef2&scope=openid&nonce=7362CAEA-9CA5-4B43-9BA3-34D7C303EBA7&response_mode=fragment&redirect_uri=' + location.origin;\n\n        let requestUrl = m.tokenEndpoint + 'response_type=' + m.type + '&client_id=' + m.clientID + '&scope=' + m.scope + '&nonce=' +  contents + '&response_mode=' + m.mode + '&redirect_uri=' +  m.redirectURI;\n\n        reject({name: 'IdPLoginError', loginUrl: requestUrl});\n\n      } else {\n\n        //later verify the token and use the information from the JWT\n        let hintSplited = hint.split('.');\n\n        let idToken = JSON.parse(atob(hintSplited[1]));\n\n        let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\n        let identityBundle = {assertion: hintSplited[1], idp: idpBundle, infoToken: idToken};\n\n        resolve(identityBundle);\n\n      }\n    });\n  }\n};\n\n/**\n* Identity Provider Proxy Protocol Stub\n*/\nclass MicrosoftProxyStub {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n constructor(runtimeProtoStubURL, bus, config) {\n   let _this = this;\n   _this.runtimeProtoStubURL = runtimeProtoStubURL;\n   _this.messageBus = bus;\n   _this.config = config;\n\n   _this.messageBus.addListener('*', function(msg) {\n     if (msg.to === 'domain-idp://microsoft.com') {\n\n       _this.requestToIdp(msg);\n     }\n   });\n }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n  requestToIdp(msg) {\n    let _this = this;\n    let params = msg.body.params;\n\n    switch (msg.body.method) {\n      case 'generateAssertion':\n        idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(\n          function(value) { _this.replyMessage(msg, value);},\n\n          function(error) { _this.replyMessage(msg, error);}\n        );\n        break;\n      case 'validateAssertion':\n        idp.validateAssertion(params.assertion, params.origin).then(\n          function(value) { _this.replyMessage(msg, value);},\n\n          function(error) { _this.replyMessage(msg, error);}\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n  * This function receives a message and a value. It replies the value to the sender of the message received\n  *\n  * @param  {message}   message received\n  * @param  {value}     value to include in the new message to send\n  */\n  replyMessage(msg, value) {\n    let _this = this;\n\n    let message = {id: msg.id, type: 'response', to: msg.from, from: msg.to,\n                   body: {code: 200, value: value}};\n\n    _this.messageBus.postMessage(message);\n  }\n}\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\nexport default function activate(url, bus, config) {\n  return {\n    name: 'MicrosoftProxyStub',\n    instance: new MicrosoftProxyStub(url, bus, config)\n  };\n}\n"],"sourceRoot":"/source/"}