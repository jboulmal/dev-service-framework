{"version":3,"sources":["syncher/Syncher.js"],"names":["_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_DataObjectReporter","require","_DataObjectReporter2","_DataObjectObserver","_DataObjectObserver2","_DataProvisional","_DataProvisional2","Syncher","owner","bus","config","this","_this","_owner","_bus","_subURL","runtimeURL","_reporters","_observers","_provisionals","addListener","msg","from","console","log","type","_onForward","_onRemoteCreate","_onRemoteDelete","schema","observers","initialData","reporter","requestMsg","to","body","authorise","Promise","resolve","reject","postMessage","reply","code","objURL","resource","newObj","childrenResources","desc","subscribeMsg","newProvisional","_releaseListeners","children","version","apply","readMsg","callback","_onNotificationHandler","slice","event","source","url","identity","ack","lType","id","object","get","module"],"mappings":"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","file":"syncher/Syncher.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nimport DataObjectReporter from './DataObjectReporter';\nimport DataObjectObserver from './DataObjectObserver';\nimport DataProvisional from './DataProvisional';\n\n/**\n * The main class for the syncher package.\n * The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.\n * Main functionality is to create reporters and to subscribe to existing ones.\n */\nclass Syncher {\n  /* private\n  _owner: URL\n  _bus: MiniBus\n\n  _subURL: URL\n\n  _reporters: <url: DataObjectReporter>\n  _observers: <url: DataObjectObserver>\n  _provisionals: <url: DataProvisional>\n\n  ----event handlers----\n  _onNotificationHandler: (event) => void\n  */\n\n /**\n  * Constructor that should be used by the Hyperty owner\n  * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.\n  * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.\n  * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.\n  */\n constructor(owner, bus, config) {\n   let _this = this;\n\n   _this._owner = owner;\n   _this._bus = bus;\n\n   _this._subURL = config.runtimeURL + '/sm';\n\n   _this._reporters = {};\n   _this._observers = {};\n   _this._provisionals = {};\n\n   bus.addListener(owner, (msg) => {\n     //ignore msg sent by himself\n     if (msg.from !== owner) {\n       console.log('Syncher-RCV: ', msg);\n       switch (msg.type) {\n         case 'forward': _this._onForward(msg); break;\n         case 'create': _this._onRemoteCreate(msg); break;\n         case 'delete': _this._onRemoteDelete(msg); break;\n       }\n     }\n   });\n }\n\n /**\n  * The owner of the Syncher and all created reporters.\n  * @type {HypertyURL}\n  */\n get owner() { return this._owner; }\n\n /**\n  * All owned reporters, the ones that were created by a create\n  * @type {Object<URL, DataObjectReporter>}\n  */\n get reporters() { return this._reporters; }\n\n /**\n  * All owned observers, the ones that were created by a local subscription\n  * @type {Object<URL, DataObjectObserver>}\n  */\n get observers() { return this._observers; }\n\n /**\n  * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.\n  * @param  {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\n  * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription\n  * @param  {JSON} initialData - Initial data of the reporter\n  * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP\n  */\n create(schema, observers, initialData) {\n   let _this = this;\n\n   initialData.reporter = _this._owner;\n   initialData.schema = schema;\n\n   //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate\n   let requestMsg = {\n     type: 'create', from: _this._owner, to: _this._subURL,\n     body: { schema: schema, value: initialData, authorise: observers }\n   };\n\n   return new Promise((resolve, reject) => {\n     //request create to the allocation system. Can be rejected by the PolicyEngine.\n     _this._bus.postMessage(requestMsg, (reply) => {\n       console.log('create-response: ', reply);\n       if (reply.body.code === 200) {\n         //reporter creation accepted\n         let objURL = reply.body.resource;\n         let newObj = new DataObjectReporter(_this, objURL, schema, 'on', initialData, reply.body.childrenResources);\n         _this._reporters[objURL] = newObj;\n\n         resolve(newObj);\n       } else {\n         //reporter creation rejected\n         reject(reply.body.desc);\n       }\n     });\n   });\n }\n\n /**\n  * Request a subscription to an existent reporter object.\n  * @param {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema\n  * @param {ObjectURL} objURL - Address of the existent reporter object to be observed\n  * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.\n  */\n subscribe(schema, objURL) {\n   let _this = this;\n\n   //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe\n   let subscribeMsg = {\n     type: 'subscribe', from: _this._owner, to: _this._subURL,\n     body: { schema: schema, resource: objURL }\n   };\n\n   return new Promise((resolve, reject) => {\n     //request subscription\n     //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\n     //for more info see the DataProvisional class documentation.\n     _this._bus.postMessage(subscribeMsg, (reply) => {\n       console.log('subscribe-response: ', reply);\n       let newProvisional = _this._provisionals[objURL];\n       delete _this._provisionals[objURL];\n       if (newProvisional) newProvisional._releaseListeners();\n\n       if (reply.body.code < 200) {\n         newProvisional = new DataProvisional(_this._owner, objURL, _this._bus, reply.body.childrenResources);\n         _this._provisionals[objURL] = newProvisional;\n       } else if (reply.body.code === 200) {\n         let newObj = new DataObjectObserver(_this, objURL, schema, 'on', reply.body.value, newProvisional.children, reply.body.version);\n         _this._observers[objURL] = newObj;\n\n         resolve(newObj);\n         newProvisional.apply(newObj);\n       } else {\n         reject(reply.body.desc);\n       }\n     });\n   });\n }\n\n /**\n  * Request a read action on the reporter object\n  * @param {ObjectURL} objURL - URL of the reporter object to be read\n  * @return {Promise<Object>} Return Promise to last available data of the reporter\n  */\n read(objURL) {\n   let _this = this;\n\n   //FLOW-OUT: this message will be sent directly to reporter object (maybe there is no listener available, so it will be resolved with MessageBus -> resolve)\n   //will reach the remote object in DataObjectReporter -> _onRead\n   let readMsg = {\n     type: 'read', from: _this._owner, to: objURL\n   };\n\n   return new Promise((resolve, reject) => {\n     _this._bus.postMessage(readMsg, (reply) => {\n       console.log('read-response: ', reply);\n       if (reply.body.code === 200) {\n         resolve(reply.body.value);\n       } else {\n         reject(reply.body.desc);\n       }\n     });\n   });\n }\n\n /**\n  * Setup the callback to process create and delete events of remove Reporter objects.\n  * This is releated to the messagens sent by create to the observers Hyperty array.\n  * @param {function(event: MsgEvent)} callback\n  */\n onNotification(callback) {\n   this._onNotificationHandler = callback;\n }\n\n //FLOW-IN: message received from a local runtime ReporterObject -> _onRemoteSubscribe\n _onForward(msg) {\n   let _this = this;\n\n   let reporter = _this._reporters[msg.body.to];\n   reporter._onForward(msg);\n }\n\n //FLOW-IN: message received from a remote Syncher -> create (this is actually an invitation to subscribe)\n _onRemoteCreate(msg) {\n   let _this = this;\n\n   //remove \"/subscription\" from the URL\n   let resource = msg.from.slice(0, -13);\n\n   let event = {\n     type: msg.type,\n     from: msg.body.source,\n     url: resource,\n     schema: msg.body.schema,\n     value: msg.body.value,\n     identity: msg.body.identity,\n\n     ack: (type) => {\n       let lType = 200;\n       if (type) {\n         lType = type;\n       }\n\n       //send ack response message\n       _this._bus.postMessage({\n         id: msg.id, type: 'response', from: msg.to, to: msg.from,\n         body: { code: lType }\n       });\n     }\n   };\n\n   if (_this._onNotificationHandler) {\n     console.log('NOTIFICATION-EVENT: ', event);\n     _this._onNotificationHandler(event);\n   }\n }\n\n //FLOW-IN: message received from a remote DataObjectReporter -> delete\n _onRemoteDelete(msg) {\n   let _this = this;\n\n   //remove \"/subscription\" from the URL\n   let resource = msg.body.resource;\n\n   let object = _this._observers[resource];\n   if (object) {\n     let event = {\n       type: msg.type,\n       url: resource,\n       identity: msg.body.identity,\n\n       ack: (type) => {\n         let lType = 200;\n         if (type) {\n           lType = type;\n         }\n\n         //TODO: any other different options for the release process, like accept but nor release local?\n         if (lType === 200) {\n           object.delete();\n         }\n\n         //send ack response message\n         _this._bus.postMessage({\n           id: msg.id, type: 'response', from: msg.to, to: msg.from,\n           body: { code: lType, source: _this._owner }\n         });\n       }\n     };\n\n     if (_this._onNotificationHandler) {\n       console.log('NOTIFICATION-EVENT: ', event);\n       _this._onNotificationHandler(event);\n     }\n   } else {\n     _this._bus.postMessage({\n       id: msg.id, type: 'response', from: msg.to, to: msg.from,\n       body: { code: 404, source: _this._owner }\n     });\n   }\n }\n\n}\n\nexport default Syncher;\n"],"sourceRoot":"/source/"}