{"version":3,"sources":["syncher/DataObject.js"],"names":["_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_SyncObject","require","_SyncObject2","_DataObjectChild","_DataObjectChild2","_utils","DataObject","syncher","url","schema","initialStatus","initialData","childrens","this","_this","_syncher","_url","_schema","_status","_syncObj","_childrens","_version","_childId","_childrenObjects","_childrenListeners","_owner","_bus","_this2","childBaseURL","forEach","child","childURL","listener","addListener","msg","from","console","log","type","_onChildCreate","_changeChildren","push","remove","keys","_releaseListeners","children","msgChildId","msgChildPath","requestMsg","to","body","resource","Promise","resolve","msgId","postMessage","newChild","onChange","event","_onChange","path","childId","callback","_onAddChildrenHandler","setTimeout","id","code","source","identity","childInfo","changeMsg","version","attribute","field","oType","ObjectType","OBJECT","cType","ChangeType","REMOVE","data","attributeType","UPDATE","operation","syncObj","deepClone","findResult","findBefore","ARRAY","ADD","arr","index","last","Array","splice","apply","concat","_arr","_index","_changeObject","get","module"],"mappings":"AAAA,YAqByP,SAASA,wBAAuBC,GAAK,MAAOA,IAAKA,EAAIC,WAAWD,GAAKE,UAAQF,GAAM,QAASG,iBAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCArBzaC,OAAOC,eAAeC,QAAQ,cAAcC,OAAM,GAAO,IAAIC,cAAa,WAAW,QAASC,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAUF,KAAWA,EAAWG,UAAS,GAAKb,OAAOC,eAAeK,EAAOI,EAAWI,IAAIJ,IAAc,MAAO,UAASZ,EAAYiB,EAAWC,GAAuI,MAAvHD,IAAWV,EAAiBP,EAAYmB,UAAUF,GAAeC,GAAYX,EAAiBP,EAAYkB,GAAoBlB,MAuBljBoB,YAAAC,QAAA,gBAF+CC,aAAa5B,uBAAuB0B,aAGnFG,iBAAAF,QAAA,qBAHsJG,kBAAkB9B,uBAAuB6B,kBAK/LE,OAAAJ,QAAA,qBAMMK,WARY,WA8BhB,QAAAA,GAAYC,EAASC,EAAKC,EAAQC,EAAeC,EAAaC,GAAWlC,gBAAAmC,KAAAP,EACvE,IAAIQ,GAAQD,IAEZC,GAAMC,SAAWR,EACjBO,EAAME,KAAOR,EACbM,EAAMG,QAAUR,EAChBK,EAAMI,QAAUR,EAChBI,EAAMK,SAAW,GAAAjB,cAAAA,WAAeS,GAChCG,EAAMM,WAAaR,EAEnBE,EAAMO,SAAW,EACjBP,EAAMQ,SAAW,EACjBR,EAAMS,oBACNT,EAAMU,sBAENV,EAAMW,OAASlB,EAAQkB,OACvBX,EAAMY,KAAOnB,EAAQmB,KAsBoD,MAlDwWxC,cAAaoB,IAAaV,IAAI,qBAAqBX,MAAM,WA+Bvd,GAAA0C,GAAAd,KACfC,EAAQD,KAERe,EAAed,EAAME,KAAO,YAC5BF,GAAMM,YACRN,EAAMM,WAAWS,QAAQ,SAACC,GACxB,GAAIC,GAAWH,EAAeE,EAC1BE,EAAWlB,EAAMY,KAAKO,YAAYF,EAAU,SAACG,GAE/C,GAAIA,EAAIC,OAASR,EAAKF,OAEpB,OADAW,QAAQC,IAAI,4BAA6BH,GACjCA,EAAII,MACV,IAAK,SAAUxB,EAAMyB,eAAeL,EAAM,MAC1C,KAAK,SAAUE,QAAQC,IAAIH,EAAM,MACjC,SAASpB,EAAM0B,gBAAgBN,KAKrCpB,GAAMU,mBAAmBiB,KAAKT,QAjDoOpC,IAAI,oBAAoBX,MAAM,WAuDpS,GAAI6B,GAAQD,IAEZC,GAAMU,mBAAmBK,QAAQ,SAACG,GAChCA,EAASU,WAGX5D,OAAO6D,KAAK7B,EAAMS,kBAAkBM,QAAQ,SAACjC,GAC3CkB,EAAMS,iBAAiB3B,GAAKgD,yBA3D1BhD,IAAI,QAEPX,MAAM,WAgGP,KAAM,qBA7FFW,IAAI,SAASX,MAAM,WAqGvB,KAAM,qBAlGFW,IAAI,OAAOX,MAAM,WA0GrB,KAAM,qBApGFW,IAAI,WAAWX,MAAM,SA6GlB4D,EAAUlC,GACjB,GAAIG,GAAQD,IAGZC,GAAMQ,UACN,IAAIwB,GAAahC,EAAMW,OAAS,IAAMX,EAAMQ,SACxCyB,EAAejC,EAAME,KAAO,aAAe6B,EAG3CG,GACFV,KAAM,SAAUH,KAAMrB,EAAMW,OAAQwB,GAAIF,EACxCG,MAAQC,SAAUL,EAAY7D,MAAO0B,GAIvC,OAAO,IAAIyC,SAAQ,SAACC,GAClB,GAAIC,GAAQxC,EAAMY,KAAK6B,YAAYP,EAEnCZ,SAAQC,IAAI,0BAA4BvB,EAAMW,OAAS,OAAQuB,EAC/D,IAAIQ,GAAW,GAAApD,mBAAAA,WAAoBU,EAAOgC,EAAYnC,EAAaG,EAAMW,OAAQ6B,EACjFE,GAASC,SAAS,SAACC,GACjB5C,EAAM6C,UAAUD,GAASE,KAAMb,EAAcc,QAASf,MAGxDhC,EAAMS,iBAAiBuB,GAAcU,EAErCH,EAAQG,QAjIN5D,IAAI,aAAaX,MAAM,SAyIlB6E,GACTjD,KAAKkD,sBAAwBD,KAzI9BlE,IAAI,iBAAiBX,MAAM,SA6IbiD,GACb,GAAIpB,GAAQD,KACRiC,EAAaZ,EAAIgB,KAAKC,QAE1Bf,SAAQC,IAAI,0BAA4BvB,EAAMW,OAAS,OAAQS,EAC/D,IAAIsB,GAAW,GAAApD,mBAAAA,WAAoBU,EAAOgC,EAAYZ,EAAIgB,KAAKjE,MAC/D6B,GAAMS,iBAAiBuB,GAAcU,EAErCQ,WAAW,WAETlD,EAAMY,KAAK6B,aACTU,GAAI/B,EAAI+B,GAAI3B,KAAM,WAAYH,KAAMD,EAAIe,GAAIA,GAAIf,EAAIC,KACpDe,MAAQgB,KAAM,IAAKC,OAAQrD,EAAMW,WAIrC,IAAIiC,IACFpB,KAAMJ,EAAII,KACVH,KAAMD,EAAIC,KACV3B,IAAK0B,EAAIe,GACThE,MAAOiD,EAAIgB,KAAKjE,MAChB4E,QAASf,EACTsB,SAAUlC,EAAIgB,KAAKkB,SAGjBtD,GAAMiD,wBACR3B,QAAQC,IAAI,uBAAwBqB,GACpC5C,EAAMiD,sBAAsBL,OAtK/B9D,IAAI,YAAYX,MAAM,SA2KbyE,EAAOW,GACf,GAAIvD,GAAQD,IAIZ,IAFAC,EAAMO,WAEgB,OAAlBP,EAAMI,QAAkB,CAE1B,GAAIoD,IACFhC,KAAM,SAAUH,KAAMrB,EAAME,KAAMiC,GAAInC,EAAME,KAAO,WACnDkC,MAAQqB,QAASzD,EAAMO,SAAU8C,OAAQrD,EAAMW,OAAQ+C,UAAWd,EAAMe,OAGtEf,GAAMgB,QAAU1E,YAAA2E,WAAWC,OACzBlB,EAAMmB,QAAU7E,YAAA8E,WAAWC,SAC7BT,EAAUpB,KAAKjE,MAAQyE,EAAMsB,OAG/BV,EAAUpB,KAAK+B,cAAgBvB,EAAMgB,MACrCJ,EAAUpB,KAAKjE,MAAQyE,EAAMsB,KACzBtB,EAAMmB,QAAU7E,YAAA8E,WAAWI,SAC7BZ,EAAUpB,KAAKiC,UAAYzB,EAAMmB,QAKjCR,IACFC,EAAUrB,GAAKoB,EAAUT,KACzBU,EAAUpB,KAAKC,SAAWkB,EAAUR,SAGtC/C,EAAMY,KAAK6B,YAAYe,OAtM1B1E,IAAI,gBAAgBX,MAAM,SA2MbmG,EAASlD,GACrB,GAAIpB,GAAQD,IAKZ,IAAIC,EAAMO,SAAW,IAAMa,EAAIgB,KAAKqB,QAAS,CAC3CzD,EAAMO,UACN,IAAIuC,GAAO1B,EAAIgB,KAAKsB,UAChBvF,GAAQ,EAAAoB,OAAAgF,WAAUnD,EAAIgB,KAAKjE,OAC3BqG,EAAaF,EAAQG,WAAW3B,EAEpC,IAAI1B,EAAIgB,KAAK+B,gBAAkBjF,YAAA2E,WAAWa,MACxC,GAAItD,EAAIgB,KAAKiC,YAAcnF,YAAA8E,WAAWW,IAAK,CACzC,GAAIC,GAAMJ,EAAW/G,IACjBoH,EAAQL,EAAWM,IACvBC,OAAM9F,UAAU+F,OAAOC,MAAML,GAAMC,EAAO,GAAGK,OAAO/G,QAC/C,IAAIiD,EAAIgB,KAAKiC,YAAcnF,YAAA8E,WAAWC,OAAQ,CACnD,GAAIkB,GAAMX,EAAW/G,IACjB2H,EAAQZ,EAAWM,IACvBK,GAAIH,OAAOI,EAAOjH,OAElBqG,GAAW/G,IAAI+G,EAAWM,MAAQ3G,MAGhCiD,GAAIgB,KAAKjE,MACXqG,EAAW/G,IAAI+G,EAAWM,MAAQ3G,QAE3BqG,GAAW/G,IAAI+G,EAAWM,UAKrCxD,SAAQC,IAAI,oCAAsCvB,EAAMO,SAAW,YAAca,EAAIgB,KAAKqB,QAAU,QApOvG3E,IAAI,kBAAkBX,MAAM,SAyObiD,GACd,GAAIpB,GAAQD,IACZuB,SAAQC,IAAI,oBAAqBvB,EAAMW,OAAQS,EAE/C,IAAI2B,GAAU3B,EAAIgB,KAAKC,SACnBN,EAAW/B,EAAMS,iBAAiBsC,EAElChB,GACF/B,EAAMqF,cAActD,EAAS1B,SAAUe,GAEvCE,QAAQC,IAAI,0BAA2BwB,MAnP8QjE,IAAI,MAAMwG,IAAI,WAiC3T,MAAOvF,MAAKG,QA9BlBpB,IAAI,SAASwG,IAAI,WAoCR,MAAOvF,MAAKI,WAjCrBrB,IAAI,SAASwG,IAAI,WAuCR,MAAOvF,MAAKK,WApCrBtB,IAAI,OAAOwG,IAAI,WA0CR,MAAOvF,MAAKM,SAAS6D,QAvC5BpF,IAAI,YAAYwG,IAAI,WA6CR,MAAOvF,MAAKU,qBA7CoDjB,IAAetB,SAAAA,WA6OpFsB,WA7O+G+F,OAAOrH,QAAQA,QAAQ","file":"syncher/DataObject.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nimport SyncObject from './SyncObject';\nimport DataObjectChild from './DataObjectChild';\nimport { ChangeType, ObjectType } from './SyncObject';\nimport {deepClone} from '../utils/utils.js';\n\n/**\n * Main extension class for observers and reporters, with common properties and methods.\n * Children management is common for observers and reporters.\n */\nclass DataObject {\n  /* private\n  _version: number\n\n  _owner: HypertyURL\n  _url: ObjectURL\n  _schema: Schema\n  _bus: MiniBus\n  _status: on | paused\n  _syncObj: SyncData\n\n  _children: { id: DataObjectChild }\n  _childrenListeners: [MsgListener]\n\n  ----event handlers----\n  _onAddChildHandler: (event) => void\n  */\n\n  /**\n   * @ignore\n   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's\n   */\n  constructor(syncher, url, schema, initialStatus, initialData, childrens) {\n    let _this = this;\n\n    _this._syncher = syncher;\n    _this._url = url;\n    _this._schema = schema;\n    _this._status = initialStatus;\n    _this._syncObj = new SyncObject(initialData);\n    _this._childrens = childrens;\n\n    _this._version = 0;\n    _this._childId = 0;\n    _this._childrenObjects = {};\n    _this._childrenListeners = [];\n\n    _this._owner = syncher._owner;\n    _this._bus = syncher._bus;\n  }\n\n  _allocateListeners() {\n    let _this = this;\n\n    let childBaseURL = _this._url + '/children/';\n    if (_this._childrens) {\n      _this._childrens.forEach((child) => {\n        let childURL = childBaseURL + child;\n        let listener = _this._bus.addListener(childURL, (msg) => {\n          //ignore msg sent by himself\n          if (msg.from !== this._owner) {\n            console.log('DataObject-Children-RCV: ', msg);\n            switch (msg.type) {\n              case 'create': _this._onChildCreate(msg); break;\n              case 'delete': console.log(msg); break;\n              default: _this._changeChildren(msg); break;\n            }\n          }\n        });\n\n        _this._childrenListeners.push(listener);\n      });\n    }\n  }\n\n  _releaseListeners() {\n    let _this = this;\n\n    _this._childrenListeners.forEach((listener) => {\n      listener.remove();\n    });\n\n    Object.keys(_this._childrenObjects).forEach((key) => {\n      _this._childrenObjects[key]._releaseListeners();\n    });\n  }\n\n  /**\n   * Object URL of reporter or observer\n   * @type {ObjectURL}\n   */\n  get url() { return this._url; }\n\n  /**\n   * Object schema URL (this field is not yet stable, and is subsject to change)\n   * @type {SchemaURL}\n   */\n  get schema() { return this._schema; }\n\n  /**\n   * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)\n   * @type {Status} - Enum of: on | paused\n   */\n  get status() { return this._status; }\n\n  /**\n   * Data structure to be synchronized.\n   * @type {JSON} - JSON structure that should follow the defined schema, if any.\n   */\n  get data() { return this._syncObj.data; }\n\n  /**\n   * All created children's since the subscription, doesn't contain all children's since reporter creation.\n   * @type {Object<ChildId, DataObjectChild>}\n   */\n  get childrens() { return this._childrenObjects; }\n\n  /**\n   * @ignore\n   */\n  pause() {\n    //TODO: this feature needs more analise\n    throw 'Not implemented';\n  }\n\n  /**\n   * @ignore\n   */\n  resume() {\n    //TODO: this feature needs more analise\n    throw 'Not implemented';\n  }\n\n  /**\n   * @ignore\n   */\n  stop() {\n    //TODO: should remove the subscription and send message unsubscribe?\n    throw 'Not implemented';\n  }\n\n  /**\n   * Create and add a DataObjectChild to a children collection.\n   * @param {String} children - Children name where the child is added.\n   * @param {JSON} initialData - Initial data of the child\n   * @return {Promise<DataObjectChild>} - Return Promise to a new DataObjectChild.\n   */\n  addChild(children, initialData) {\n    let _this = this;\n\n    //create new child unique ID, based on hypertyURL\n    _this._childId++;\n    let msgChildId = _this._owner + '#' + _this._childId;\n    let msgChildPath = _this._url + '/children/' + children;\n\n    //FLOW-OUT: this message will be sent directly to a resource child address: MessageBus\n    let requestMsg = {\n      type: 'create', from: _this._owner, to: msgChildPath,\n      body: { resource: msgChildId, value: initialData }\n    };\n\n    //returns promise, in the future, the API may change to asynchronous call\n    return new Promise((resolve) => {\n      let msgId = _this._bus.postMessage(requestMsg);\n\n      console.log('create-reporter-child( ' + _this._owner + ' ): ', requestMsg);\n      let newChild = new DataObjectChild(_this, msgChildId, initialData, _this._owner, msgId);\n      newChild.onChange((event) => {\n        _this._onChange(event, { path: msgChildPath, childId: msgChildId });\n      });\n\n      _this._childrenObjects[msgChildId] = newChild;\n\n      resolve(newChild);\n    });\n  }\n\n  /**\n   * Setup the callback to process create and delete of childrens.\n   * @param {function(event: MsgEvent)} callback\n   */\n  onAddChild(callback) {\n    this._onAddChildrenHandler = callback;\n  }\n\n  //FLOW-IN: message received from a remote DataObject -> addChild\n  _onChildCreate(msg) {\n    let _this = this;\n    let msgChildId = msg.body.resource;\n\n    console.log('create-observer-child( ' + _this._owner + ' ): ', msg);\n    let newChild = new DataObjectChild(_this, msgChildId, msg.body.value);\n    _this._childrenObjects[msgChildId] = newChild;\n\n    setTimeout(() => {\n      //FLOW-OUT: will flow to DataObjectChild -> _onResponse\n      _this._bus.postMessage({\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\n        body: { code: 200, source: _this._owner }\n      });\n    });\n\n    let event = {\n      type: msg.type,\n      from: msg.from,\n      url: msg.to,\n      value: msg.body.value,\n      childId: msgChildId,\n      identity: msg.body.identity\n    };\n\n    if (_this._onAddChildrenHandler) {\n      console.log('ADD-CHILDREN-EVENT: ', event);\n      _this._onAddChildrenHandler(event);\n    }\n  }\n\n  //send delta messages to subscriptions\n  _onChange(event, childInfo) {\n    let _this = this;\n\n    _this._version++;\n\n    if (_this._status === 'on') {\n      //FLOW-OUT: this message will be sent directly to a resource changes address: MessageBus\n      let changeMsg = {\n        type: 'update', from: _this._url, to: _this._url + '/changes',\n        body: { version: _this._version, source: _this._owner, attribute: event.field }\n      };\n\n      if (event.oType === ObjectType.OBJECT) {\n        if (event.cType !== ChangeType.REMOVE) {\n          changeMsg.body.value = event.data;\n        }\n      } else {\n        changeMsg.body.attributeType = event.oType;\n        changeMsg.body.value = event.data;\n        if (event.cType !== ChangeType.UPDATE) {\n          changeMsg.body.operation = event.cType;\n        }\n      }\n\n      //childInfo must have (path, childId)\n      if (childInfo) {\n        changeMsg.to = childInfo.path;\n        changeMsg.body.resource = childInfo.childId;\n      }\n\n      _this._bus.postMessage(changeMsg);\n    }\n  }\n\n  //FLOW-IN: delta message received from a remote DataObjectReporter or DataObjectChild when changing data\n  _changeObject(syncObj, msg) {\n    let _this = this;\n\n    //TODO: update version ?\n    //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?\n    //will we need to confirm the reception ?\n    if (_this._version + 1 === msg.body.version) {\n      _this._version++;\n      let path = msg.body.attribute;\n      let value = deepClone(msg.body.value);\n      let findResult = syncObj.findBefore(path);\n\n      if (msg.body.attributeType === ObjectType.ARRAY) {\n        if (msg.body.operation === ChangeType.ADD) {\n          let arr = findResult.obj;\n          let index = findResult.last;\n          Array.prototype.splice.apply(arr, [index, 0].concat(value));\n        } else if (msg.body.operation === ChangeType.REMOVE) {\n          let arr = findResult.obj;\n          let index = findResult.last;\n          arr.splice(index, value);\n        } else {\n          findResult.obj[findResult.last] = value; // UPDATE\n        }\n      } else {\n        if (msg.body.value) {\n          findResult.obj[findResult.last] = value; // UPDATE or ADD\n        } else {\n          delete findResult.obj[findResult.last]; // REMOVE\n        }\n      }\n    } else {\n      //TODO: how to handle unsynchronized versions?\n      console.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');\n    }\n  }\n\n  //FLOW-IN: message received from a remote DataObjectChild when changing data\n  _changeChildren(msg) {\n    let _this = this;\n    console.log('Change children: ', _this._owner, msg);\n\n    let childId = msg.body.resource;\n    let children = _this._childrenObjects[childId];\n\n    if (children) {\n      _this._changeObject(children._syncObj, msg);\n    } else {\n      console.log('No children found for: ', childId);\n    }\n  }\n\n}\n\nexport default DataObject;\n"],"sourceRoot":"/source/"}