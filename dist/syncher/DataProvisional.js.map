{"version":3,"sources":["syncher/DataProvisional.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","DataProvisional","owner","url","bus","children","this","_this","_owner","_url","_bus","_children","_changes","_allocateListeners","_listener","addListener","msg","console","log","push","remove","observer","forEach","change","_changeObject","_syncObj","get","module"],"mappings":"AAAA,YAAokB,SAASA,iBAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCAAjqBC,OAAOC,eAAeC,QAAQ,cAAcC,OAAM,GAAO,IAAIC,cAAa,WAAW,QAASC,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAUF,KAAWA,EAAWG,UAAS,GAAKb,OAAOC,eAAeK,EAAOI,EAAWI,IAAIJ,IAAc,MAAO,UAASZ,EAAYiB,EAAWC,GAAuI,MAAvHD,IAAWV,EAAiBP,EAAYmB,UAAUF,GAAeC,GAAYX,EAAiBP,EAAYkB,GAAoBlB,MAkC5iBoB,gBAHiB,WAWrB,QAAAA,GAAYC,EAAOC,EAAKC,EAAKC,GAAU1B,gBAAA2B,KAAAL,EACrC,IAAIM,GAAQD,IAEZC,GAAMC,OAASN,EACfK,EAAME,KAAON,EACbI,EAAMG,KAAON,EACbG,EAAMI,UAAYN,EAElBE,EAAMK,YACNL,EAAMM,qBAE0N,MAjBF1B,cAAac,IAAkBJ,IAAI,qBAAqBX,MAAM,WAmB5R,GAAIqB,GAAQD,IAEZC,GAAMO,UAAYP,EAAMG,KAAKK,YAAYR,EAAME,KAAM,SAACO,GACpDC,QAAQC,IAAI,mBAAqBX,EAAME,KAAO,SAAUO,GACxDT,EAAMK,SAASO,KAAKH,QARfnB,IAAI,oBAAoBX,MAAM,WA8BrC,GAAIqB,GAAQD,IAEZC,GAAMO,UAAUM,YA9BPvB,IAAI,QAAQX,MAAM,SAuCvBmC,GACJ,GAAId,GAAQD,IACZC,GAAMK,SAASU,QAAQ,SAACC,GACtBF,EAASG,cAAcH,EAASI,SAAUF,QA1CuH1B,IAAI,WAAW6B,IAAI,WAqCvK,MAAOpB,MAAKK,cArC4MV,IAAoBhB,SAAAA,WA+ChPgB,gBA/CgR0B,OAAO1C,QAAQA,QAAQ","file":"syncher/DataProvisional.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n * @access private\n * This class is responsible for collecting delta changes in remote objects, before the response of subscription reach the observer.\n * It's used in Syncher -> subscribe. The flow is defined as:\n * 1. (observer) --subscribe--> (reporter)\n * 2. (observer) <--delta updates-- (reporter)\n * 3. (observer) <--subscribe response-- (reporter)\n * This means that there could be delta updates transferred before the subscription confirmation.\n * Since there is no DataObjectObserver before the ubscription confirmation, there should be some other object collecting the updates.\n * Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.\n */\nclass DataProvisional {\n  /* private\n  _childrenListeners: [MsgListener]\n  _listener: MsgListener\n\n  _changes: []\n  */\n\n  constructor(owner, url, bus, children) {\n    let _this = this;\n\n    _this._owner = owner;\n    _this._url = url;\n    _this._bus = bus;\n    _this._children = children;\n\n    _this._changes = [];\n    _this._allocateListeners();\n  }\n\n  _allocateListeners() {\n    let _this = this;\n\n    _this._listener = _this._bus.addListener(_this._url, (msg) => {\n      console.log('DataProvisional-' + _this._url + '-RCV: ', msg);\n      _this._changes.push(msg);\n    });\n\n    /*\n    _this._childrenListeners = [];\n    if (_this._children) {\n      let childBaseURL = url + '/children/';\n      _this._children.forEach((child) => {\n        let childURL = childBaseURL + child;\n        let listener = _this._bus.addListener(childURL, (msg) => {\n          //ignore msg sent by himself\n          if (msg.from !== owner) {\n            console.log(msg);\n          }\n        });\n\n        _this._childrenListeners.push(listener);\n      });\n    }*/\n  }\n\n  _releaseListeners() {\n    let _this = this;\n\n    _this._listener.remove();\n\n    /*_this._childrenListeners.forEach((listener) => {\n      listener.remove();\n    });*/\n  }\n\n  get children() { return this._children; }\n\n  apply(observer) {\n    let _this = this;\n    _this._changes.forEach((change) => {\n      observer._changeObject(observer._syncObj, change);\n    });\n  }\n}\n\nexport default DataProvisional;\n"],"sourceRoot":"/source/"}