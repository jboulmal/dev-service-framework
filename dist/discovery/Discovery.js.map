{"version":3,"sources":["discovery/Discovery.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_utils","require","Discovery","hypertyURL","msgBus","this","_this","messageBus","domain","divideURL","discoveryURL","name","activeDomain","msg","type","from","to","body","resource","Promise","resolve","reject","postMessage","reply","dataObject","url","response","code","reporter","dataObjects","schema","resources","criteria","dataSchemes","hyperties","user","userIdentifier","convertToUserURL","email","identityURL","substring","indexOf","message","console","log","hyperty","mostRecent","lastHyperty","undefined","lastModified","Date","hypertyDate","getTime","idPackage","id","hypertyInstance","module"],"mappings":"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","file":"discovery/Discovery.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\nimport {divideURL, convertToUserURL} from '../utils/utils';\n\n/**\n* Core Discovery interface\n* Class to allow applications to search for hyperties and DataObjects using the message bus\n*/\nclass Discovery {\n\n  /**\n  * To initialise the HypertyDiscover, which will provide the support for hyperties to\n  * query users registered in outside the internal core.\n  * @param  {MessageBus}          msgbus                msgbus\n  * @param  {RuntimeURL}          runtimeURL            runtimeURL\n  */\n  constructor(hypertyURL, msgBus) {\n    let _this = this;\n    _this.messageBus = msgBus;\n\n    _this.domain = divideURL(hypertyURL).domain;\n    _this.discoveryURL = hypertyURL;\n\n  }\n\n  /**\n  * function to request about an dataObject registered in domain registry with a given name, and\n  * return the dataObject information, if found.\n  * @param  {String}              name  dataObject URL\n  * @param  {String}            domain (Optional)\n  * @return {Promise}          Promise\n  */\n  discoverDataObjectPerName(name, domain) {\n    let _this = this;\n    let activeDomain;\n\n    activeDomain = (!domain) ? _this.domain : domain;\n\n    let msg = {\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name}\n    };\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let dataObject = reply.body.value;\n\n        if (dataObject) {\n          resolve(dataObject);\n        } else {\n          reject('DataObject not found');\n        }\n      });\n    });\n  }\n\n  /**\n  * function to request about dataObject registered in domain registry, and\n  * return the dataObject information, if found.\n  * @param  {String}              url  dataObject URL\n  * @param  {String}            domain (Optional)\n  * @return {Promise}          Promise\n  */\n  discoverDataObjectPerURL(url, domain) {\n    let _this = this;\n    let activeDomain;\n\n    if (!domain) {\n      activeDomain = _this.domain;\n    } else {\n      activeDomain = domain;\n    }\n\n    let msg = {\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url}\n    };\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let dataObject = reply.body.value;\n\n        if (dataObject) {\n          resolve(dataObject);\n        } else {\n          reject('DataObject not found');\n        }\n      });\n    });\n  }\n\n  /**\n  *  function to delete an Data Object registered in the Domain Registry\n  *  @param   {String}           url              dataObject url\n  *  @param   {domain}           domain         (Optional)\n  *  @return  {Promise}          Promise          result\n  */\n  deleteDataObject(url, domain) {\n    let _this = this;\n    let activeDomain;\n\n    if (!domain) {\n      activeDomain = _this.domain;\n    } else {\n      activeDomain = domain;\n    }\n\n    let msg = {\n      type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/',  body: { value: {name: url}}};\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let response = reply.body.code;\n\n        if (response === 200) {\n          resolve(response);\n        } else {\n          reject('Error on deleting dataObject');\n        }\n      });\n    });\n\n  }\n\n  /**\n  * function to request about specific reporter dataObject registered in domain registry, and\n  * return the dataObjects from that reporter.\n  * @param  {String}           reporter     dataObject reporter\n  * @param  {String}           domain       (Optional)\n  * @return {Array}           Promise       DataObjects\n  */\n  discoverDataObjectPerReporter(reporter, domain) {\n    let _this = this;\n    let activeDomain;\n\n    if (!domain) {\n      activeDomain = _this.domain;\n    } else {\n      activeDomain = domain;\n    }\n\n    let msg = {\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: reporter}\n    };\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let dataObjects = reply.body.value;\n\n        if (dataObjects) {\n          resolve(dataObjects);\n        } else {\n          reject('No dataObject was found');\n        }\n      });\n    });\n  }\n\n  /** Advanced Search for dataObjects registered in domain registry\n  * @param  {String}           user                  user identifier, either in url or email format\n  * @param  {Array<string>}    schema (Optional)     types of dataObject schemas\n  * @param  {Array<string>}    resources (Optional)  types of dataObject resources\n  * @param  {String}           domain (Optional)     domain of the registry to search\n  */\n  discoverDataObject(name, schema, resources, domain) {\n    let _this = this;\n    let activeDomain;\n    //let userIdentifier = convertToUserURL(user);\n\n    activeDomain = (!domain) ? _this.domain : domain;\n\n    let msg = {\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name,\n      criteria: {resources: resources, dataSchemes: schema}\n      }\n    };\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let hyperties = reply.body.value;\n\n        if (hyperties) {\n          resolve(hyperties);\n        } else {\n          reject('No DataObject was found');\n        }\n      });\n    });\n  }\n\n  /** Advanced Search for Hyperties registered in domain registry\n  * @param  {String}           user                  user identifier, either in url or email format\n  * @param  {Array<string>}    schema (Optional)     types of hyperties schemas\n  * @param  {Array<string>}    resources (Optional)  types of hyperties resources\n  * @param  {String}           domain (Optional)     domain of the registry to search\n  */\n  discoverHyperty(user, schema, resources, domain) {\n    let _this = this;\n    let activeDomain;\n    let userIdentifier = convertToUserURL(user);\n\n    if (!domain) {\n      activeDomain = _this.domain;\n    } else {\n      activeDomain = domain;\n    }\n\n    let msg = {\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: userIdentifier,\n      criteria: {resources: resources, dataSchemes: schema}\n      }\n    };\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let hyperties = reply.body.value;\n\n        if (hyperties) {\n          resolve(hyperties);\n        } else {\n          reject('No Hyperty was found');\n        }\n      });\n    });\n  }\n\n  /**\n  * function to request about users registered in domain registry, and\n  * return the last hyperty instance registered by the user.\n  * @param  {email}              email\n  * @param  {domain}            domain (Optional)\n  * @return {Promise}          Promise\n  */\n  discoverHypertyPerUser(email, domain) {\n    let _this = this;\n    let activeDomain;\n\n    if (!domain) {\n      activeDomain = _this.domain;\n    } else {\n      activeDomain = domain;\n    }\n\n    let identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));\n\n    // message to query domain registry, asking for a user hyperty.\n    let message = {\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL}\n    };\n\n    console.log('Message: ', message, activeDomain, identityURL);\n\n    //console.log('message READ', message);\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(message, (reply) => {\n        console.log('message reply', reply);\n\n        let hyperty;\n        let mostRecent;\n        let lastHyperty;\n        let value = reply.body.value;\n\n        for (hyperty in value) {\n          if (value[hyperty].lastModified !== undefined) {\n            if (mostRecent === undefined) {\n              mostRecent = new Date(value[hyperty].lastModified);\n              lastHyperty = hyperty;\n            } else {\n              let hypertyDate = new Date(value[hyperty].lastModified);\n              if (mostRecent.getTime() < hypertyDate.getTime()) {\n                mostRecent = hypertyDate;\n                lastHyperty = hyperty;\n              }\n            }\n          }\n        }\n\n        console.log('Last Hyperty: ', lastHyperty, mostRecent);\n\n        let hypertyURL = lastHyperty;\n\n        if (hypertyURL === undefined) {\n          return reject('User Hyperty not found');\n        }\n\n        let idPackage = {\n          id: email,\n          descriptor: value[hypertyURL].descriptor,\n          hypertyURL: hypertyURL\n        };\n\n        console.log('===> hypertyDiscovery messageBundle: ', idPackage);\n        resolve(idPackage);\n      });\n    });\n  }\n\n  /**\n  * function to request about users registered in domain registry, and\n  * return the all the hyperties registered by the user\n  * @param  {email}              email\n  * @param  {domain}            domain (Optional)\n  * @return {Promise}          Promise\n  */\n  discoverHypertiesPerUser(email, domain) {\n    let _this = this;\n    let activeDomain;\n\n    if (!domain) {\n      activeDomain = _this.domain;\n    } else {\n      activeDomain = domain;\n    }\n\n    let identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));\n\n    // message to query domain registry, asking for a user hyperty.\n    let message = {\n      type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL}\n    };\n\n    console.log('Message discoverHypertiesPerUser: ', message, activeDomain, identityURL);\n\n    //console.log('message READ', message);\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(message, (reply) => {\n        console.log('discoverHypertiesPerUser reply', reply);\n\n        let value = reply.body.value;\n\n        if (!value) {\n          return reject('User Hyperty not found');\n        }\n\n        resolve(value);\n      });\n    });\n  }\n\n  /**\n  *  function to delete an hypertyInstance in the Domain Registry\n  *  @param   {String}           user              user url\n  *  @param   {String}           hypertyInstance   HypertyInsntance url\n  *  @param   {domain}           domain (Optional)\n  *  @return  {Promise}          Promise          result\n  */\n  deleteHyperty(user, hypertyInstance, domain) {\n    let _this = this;\n    let activeDomain;\n\n    if (!domain) {\n      activeDomain = _this.domain;\n    } else {\n      activeDomain = domain;\n    }\n\n    let msg = {\n      type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/',   body: { value: {user: user, url: hypertyInstance }}};\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let response = reply.body.code;\n\n        if (response) {\n          resolve('Hyperty successfully deleted');\n        } else {\n          reject('Error on deleting hyperty');\n        }\n      });\n    });\n\n  }\n\n}\n\nexport default Discovery;\n"],"sourceRoot":"/source/"}