{"version":3,"sources":["identityManager/IdentityManager.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_utils","require","IdentityManager","hypertyURL","runtimeURL","msgBus","this","_this","messageBus","domain","divideURL","type","activeHypertyURL","searchType","msg","from","to","body","resource","criteria","Promise","resolve","reject","postMessage","reply","userURL","code","module"],"mappings":"AAAA,YAqBwC,SAASA,iBAAgBC,EAASC,GAAa,KAAKD,YAAoBC,IAAc,KAAM,IAAIC,WAAU,qCArBrIC,OAAOC,eAAeC,QAAQ,cAAcC,OAAM,GAAO,IAAIC,cAAa,WAAW,QAASC,GAAiBC,EAAOC,GAAO,IAAI,GAAIC,GAAE,EAAEA,EAAED,EAAME,OAAOD,IAAI,CAAC,GAAIE,GAAWH,EAAMC,EAAGE,GAAWC,WAAWD,EAAWC,aAAY,EAAMD,EAAWE,cAAa,EAAQ,SAAUF,KAAWA,EAAWG,UAAS,GAAKb,OAAOC,eAAeK,EAAOI,EAAWI,IAAIJ,IAAc,MAAO,UAASZ,EAAYiB,EAAWC,GAAuI,MAAvHD,IAAWV,EAAiBP,EAAYmB,UAAUF,GAAeC,GAAYX,EAAiBP,EAAYkB,GAAoBlB,MAsBljBoB,OAAAC,QAAA,kBAMMC,gBAJgB,WAapB,QAAAA,GAAYC,EAAYC,EAAYC,GAAQ3B,gBAAA4B,KAAAJ,EAC1C,IAAIK,GAAQD,IACZC,GAAMC,WAAaH,EAEnBE,EAAME,QAAS,EAAAT,OAAAU,WAAUP,GAAYM,OACrCF,EAAMJ,WAAaA,EACnBI,EAAMH,WAAaA,EAP0d,MAD7elB,cAAagB,IAAkBN,IAAI,yBAAyBX,MAAM,SAiB7C0B,EAAMR,GAC3B,GAAII,GAAQD,KACRM,EAAA,OAGAC,EAAcF,EAAQA,EAAO,GAK/BC,GAHGT,EAGgBA,EAFAI,EAAMJ,UAK3B,IAAIW,IACFH,KAAM,OAAQI,KAAMH,EAAkBI,GAAIT,EAAMH,WAAa,aAAca,MAAQC,SAAUL,EAAYM,SAAUP,GAGrH,OAAO,IAAIQ,SAAQ,SAASC,EAASC,GAEnCf,EAAMC,WAAWe,YAAYT,EAAK,SAACU,GAEjC,GAAIC,GAAUD,EAAMP,KAAKC,QAErBO,IAA+B,MAApBD,EAAMP,KAAKS,KACxBL,EAAQI,GAERH,EAAO,SAAWE,EAAMP,KAAKS,KAAO,kCA1C0cxB,IAAoBlB,SAAAA,WAiD7fkB,gBAjD6hByB,OAAO3C,QAAQA,QAAQ","file":"identityManager/IdentityManager.js","sourcesContent":["/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nimport {divideURL} from '../utils/utils';\n\n/**\n* Core IdentityManager interface\n* Class to allow applications to search for Identities registered in runtime-core\n*/\nclass IdentityManager {\n\n  /**\n  * To initialise the IdentityManager, which will provide the support for hyperties to\n  * query about identities registered\n  * @param  {String}          hypertyURL            hypertyURL\n  * @param  {String}          runtimeURL            runtimeURL\n  * @param  {MessageBus}          msgbus                msgbus\n  */\n  constructor(hypertyURL, runtimeURL, msgBus) {\n    let _this = this;\n    _this.messageBus = msgBus;\n\n    _this.domain = divideURL(hypertyURL).domain;\n    _this.hypertyURL = hypertyURL;\n    _this.runtimeURL = runtimeURL;\n  }\n\n  /**\n  * Function to query the runtime registry about the identity to which the hyperty was associated\n  * @param {String}       type (Optional)         type of user info required\n  * @param {String}       hypertyURL (Optional)   hypertyURL to search for\n  * @return {Promise}     userURL       userURL associated to the hyperty\n  */\n  discoverUserRegistered(type, hypertyURL) {\n    let _this = this;\n    let activeHypertyURL;\n\n    // if any type of search is selected query for that type, otherwise query for default user info\n    let searchType = (type) ? type : '.';\n\n    if (!hypertyURL) {\n      activeHypertyURL = _this.hypertyURL;\n    } else {\n      activeHypertyURL = hypertyURL;\n    }\n\n    let msg = {\n      type: 'read', from: activeHypertyURL, to: _this.runtimeURL + '/registry/', body: { resource: searchType, criteria: activeHypertyURL}\n    };\n\n    return new Promise(function(resolve, reject) {\n\n      _this.messageBus.postMessage(msg, (reply) => {\n\n        let userURL = reply.body.resource;\n\n        if (userURL && reply.body.code === 200) {\n          resolve(userURL);\n        } else {\n          reject('code: ' + reply.body.code + ' No user was not found');\n        }\n      });\n    });\n  }\n}\n\nexport default IdentityManager;\n"],"sourceRoot":"/source/"}